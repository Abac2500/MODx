<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Snippets' => 
    array (
      'a6069414528006839d25bdd9c89d116b' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"getImageList","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\r\\n * getImageList\\r\\n *\\r\\n * Copyright 2009-2014 by Bruno Perner <b.perner@gmx.de>\\r\\n *\\r\\n * getImageList is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * getImageList is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * getImageList; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package migx\\r\\n *\\/\\r\\n\\/**\\r\\n * getImageList\\r\\n *\\r\\n * display Items from outputvalue of TV with custom-TV-input-type MIGX or from other JSON-string for MODx Revolution \\r\\n *\\r\\n * @version 1.4\\r\\n * @author Bruno Perner <b.perner@gmx.de>\\r\\n * @copyright Copyright &copy; 2009-2014\\r\\n * @license http:\\/\\/www.gnu.org\\/licenses\\/old-licenses\\/gpl-2.0.html GNU General Public License\\r\\n * version 2 or (at your option) any later version.\\r\\n * @package migx\\r\\n *\\/\\r\\n\\r\\n\\/*example: <ul>[[!getImageList? &tvname=`myTV`&tpl=`@CODE:<li>[[+idx]]<img src=\\"[[+imageURL]]\\"\\/><p>[[+imageAlt]]<\\/p><\\/li>`]]<\\/ul>*\\/\\r\\n\\/* get default properties *\\/\\r\\n\\r\\n$allow_request = (bool)$modx->getOption(\'allowRequest\', $scriptProperties, false);\\r\\n$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\r\\n$inherit_children_tvname = $modx->getOption(\'inherit_children_tvname\', $scriptProperties, \'\');\\r\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\r\\n$wrapperTpl = $modx->getOption(\'wrapperTpl\', $scriptProperties, \'\');\\r\\n$emptyTpl = $modx->getOption(\'emptyTpl\', $scriptProperties, \'\'); \\r\\n$limit = $modx->getOption(\'limit\', $scriptProperties, \'0\');\\r\\n$offset = $modx->getOption(\'offset\', $scriptProperties, 0);\\r\\n$totalVar = $modx->getOption(\'totalVar\', $scriptProperties, \'total\');\\r\\n$randomize = $modx->getOption(\'randomize\', $scriptProperties, false);\\r\\n$preselectLimit = $modx->getOption(\'preselectLimit\', $scriptProperties, 0); \\/\\/ when random preselect important images\\r\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\r\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\r\\n$sort = $modx->getOption(\'sort\', $scriptProperties, \'\');\\r\\n$sort = !empty($sort) ? $modx->fromJSON($sort) : array();\\r\\n$toSeparatePlaceholders = $modx->getOption(\'toSeparatePlaceholders\', $scriptProperties, false);\\r\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\r\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \'\');\\r\\n$splitSeparator = $modx->getOption(\'splitSeparator\', $scriptProperties, \'\');\\r\\n$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'MIGX_id\');\\r\\n$toJsonPlaceholder = $modx->getOption(\'toJsonPlaceholder\', $scriptProperties, false);\\r\\n$jsonVarKey = $modx->getOption(\'jsonVarKey\', $scriptProperties, \'migx_outputvalue\');\\r\\n$outputvalue = $modx->getOption(\'value\', $scriptProperties, \'\');\\r\\nif ($allow_request) {\\r\\n    $outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\r\\n}\\r\\n$docidVarKey = $modx->getOption(\'docidVarKey\', $scriptProperties, \'migx_docid\');\\r\\n$docid = $modx->getOption(\'docid\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : 1));\\r\\nif ($allow_request) {\\r\\n    $docid = isset($_REQUEST[$docidVarKey]) ? $_REQUEST[$docidVarKey] : $docid;\\r\\n}\\r\\n$processTVs = $modx->getOption(\'processTVs\', $scriptProperties, \'1\');\\r\\n$reverse = $modx->getOption(\'reverse\', $scriptProperties, \'0\');\\r\\n$sumFields = $modx->getOption(\'sumFields\', $scriptProperties, \'\');\\r\\n$sumPrefix = $modx->getOption(\'sumPrefix\', $scriptProperties, \'summary_\');\\r\\n$addfields = $modx->getOption(\'addfields\', $scriptProperties, \'\');\\r\\n$addfields = !empty($addfields) ? explode(\',\', $addfields) : null;\\r\\n\\/\\/split json into parts\\r\\n$splits = $modx->fromJson($modx->getOption(\'splits\', $scriptProperties, 0));\\r\\n$splitTpl = $modx->getOption(\'splitTpl\', $scriptProperties, \'\');\\r\\n$splitSeparator = $modx->getOption(\'splitSeparator\', $scriptProperties, \'\');\\r\\n$inheritFrom = $modx->getOption(\'inheritFrom\', $scriptProperties, \'\'); \\/\\/commaseparated list of resource-ids or\\/and the keyword \'parents\' where to inherit from\\r\\n$inheritFrom = !empty($inheritFrom) ? explode(\',\', $inheritFrom) : \'\';\\r\\n\\r\\n$modx->setPlaceholder(\'docid\', $docid);\\r\\n\\r\\n$base_path = $modx->getOption(\'base_path\', null, MODX_BASE_PATH);\\r\\n$base_url = $modx->getOption(\'base_url\', null, MODX_BASE_URL);\\r\\n\\r\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\r\\nif (!($migx instanceof Migx))\\r\\n    return \'\';\\r\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : \'web\';\\r\\n\\r\\nif (!empty($tvname)) {\\r\\n    if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname))) {\\r\\n\\r\\n        \\/*\\r\\n        *   get inputProperties\\r\\n        *\\/\\r\\n\\r\\n\\r\\n        $properties = $tv->get(\'input_properties\');\\r\\n        $properties = isset($properties[\'formtabs\']) ? $properties : $tv->getProperties();\\r\\n\\r\\n        $migx->config[\'configs\'] = $modx->getOption(\'configs\', $properties, \'\');\\r\\n        if (!empty($migx->config[\'configs\'])) {\\r\\n            $migx->loadConfigs();\\r\\n            \\/\\/ get tabs from file or migx-config-table\\r\\n            $formtabs = $migx->getTabs();\\r\\n        }\\r\\n        if (empty($formtabs) && isset($properties[\'formtabs\'])) {\\r\\n            \\/\\/try to get formtabs and its fields from properties\\r\\n            $formtabs = $modx->fromJSON($properties[\'formtabs\']);\\r\\n        }\\r\\n\\r\\n        if (!empty($properties[\'basePath\'])) {\\r\\n            if ($properties[\'autoResourceFolders\'] == \'true\') {\\r\\n                $scriptProperties[\'base_path\'] = $base_path . $properties[\'basePath\'] . $docid . \'\\/\';\\r\\n                $scriptProperties[\'base_url\'] = $base_url . $properties[\'basePath\'] . $docid . \'\\/\';\\r\\n            } else {\\r\\n                $scriptProperties[\'base_path\'] = $base_path . $properties[\'base_path\'];\\r\\n                $scriptProperties[\'base_url\'] = $base_url . $properties[\'basePath\'];\\r\\n            }\\r\\n        }\\r\\n        if ($jsonVarKey == \'migx_outputvalue\' && !empty($properties[\'jsonvarkey\'])) {\\r\\n            $jsonVarKey = $properties[\'jsonvarkey\'];\\r\\n            $outputvalue = $allow_request && isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\r\\n        }\\r\\n\\r\\n        if (empty($outputvalue)) {\\r\\n            $outputvalue = $tv->renderOutput($docid);\\r\\n            if (empty($outputvalue) && !empty($inheritFrom)) {\\r\\n                foreach ($inheritFrom as $from) {\\r\\n                    if ($from == \'parents\') {\\r\\n                        if (!empty($inherit_children_tvname)){\\r\\n                            \\/\\/try to get items from optional MIGX-TV for children\\r\\n                            if ($inh_tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inherit_children_tvname))) {\\r\\n                                $outputvalue = $inh_tv->processInheritBinding(\'\', $docid);    \\r\\n                            }\\r\\n                        }\\r\\n                        $outputvalue = empty($outputvalue) ? $tv->processInheritBinding(\'\', $docid) : $outputvalue;\\r\\n                    } else {\\r\\n                        $outputvalue = $tv->renderOutput($from);\\r\\n                    }\\r\\n                    if (!empty($outputvalue)) {\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        \\/*\\r\\n        *   get inputTvs \\r\\n        *\\/\\r\\n        $inputTvs = array();\\r\\n        if (is_array($formtabs)) {\\r\\n\\r\\n            \\/\\/multiple different Forms\\r\\n            \\/\\/ Note: use same field-names and inputTVs in all forms\\r\\n            $inputTvs = $migx->extractInputTvs($formtabs);\\r\\n        }\\r\\n        if ($migx->source = $tv->getSource($migx->working_context, false)) {\\r\\n            $migx->source->initialize();\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\nif (empty($outputvalue)) {\\r\\n    $modx->setPlaceholder($totalVar, 0);\\r\\n    return \'\';\\r\\n}\\r\\n\\r\\n\\/\\/echo $outputvalue.\'<br\\/><br\\/>\';\\r\\n\\r\\n$items = $modx->fromJSON($outputvalue);\\r\\n\\r\\n\\/\\/ where filter\\r\\nif (is_array($where) && count($where) > 0) {\\r\\n    $items = $migx->filterItems($where, $items);\\r\\n}\\r\\n$modx->setPlaceholder($totalVar, count($items));\\r\\n\\r\\nif (!empty($reverse)) {\\r\\n    $items = array_reverse($items);\\r\\n}\\r\\n\\r\\n\\/\\/ sort items\\r\\nif (is_array($sort) && count($sort) > 0) {\\r\\n    $items = $migx->sortDbResult($items, $sort);\\r\\n}\\r\\n\\r\\n$summaries = array();\\r\\n$output = \'\';\\r\\n$items = $offset > 0 ? array_slice($items, $offset) : $items;\\r\\n$count = count($items);\\r\\n\\r\\nif ($count > 0) {\\r\\n    $limit = $limit == 0 || $limit > $count ? $count : $limit;\\r\\n    $preselectLimit = $preselectLimit > $count ? $count : $preselectLimit;\\r\\n    \\/\\/preselect important items\\r\\n    $preitems = array();\\r\\n    if ($randomize && $preselectLimit > 0) {\\r\\n        for ($i = 0; $i < $preselectLimit; $i++) {\\r\\n            $preitems[] = $items[$i];\\r\\n            unset($items[$i]);\\r\\n        }\\r\\n        $limit = $limit - count($preitems);\\r\\n    }\\r\\n\\r\\n    \\/\\/shuffle items\\r\\n    if ($randomize) {\\r\\n        shuffle($items);\\r\\n    }\\r\\n\\r\\n    \\/\\/limit items\\r\\n    $count = count($items);\\r\\n    $tempitems = array();\\r\\n\\r\\n    for ($i = 0; $i < $limit; $i++) {\\r\\n        if ($i >= $count) {\\r\\n            break;\\r\\n        }\\r\\n        $tempitems[] = $items[$i];\\r\\n    }\\r\\n    $items = $tempitems;\\r\\n\\r\\n    \\/\\/add preselected items and schuffle again\\r\\n    if ($randomize && $preselectLimit > 0) {\\r\\n        $items = array_merge($preitems, $items);\\r\\n        shuffle($items);\\r\\n    }\\r\\n\\r\\n    $properties = array();\\r\\n    foreach ($scriptProperties as $property => $value) {\\r\\n        $properties[\'property.\' . $property] = $value;\\r\\n    }\\r\\n\\r\\n    $idx = 0;\\r\\n    $output = array();\\r\\n    $template = array();\\r\\n    $count = count($items);\\r\\n\\r\\n    foreach ($items as $key => $item) {\\r\\n        $formname = isset($item[\'MIGX_formname\']) ? $item[\'MIGX_formname\'] . \'_\' : \'\';\\r\\n        $fields = array();\\r\\n        foreach ($item as $field => $value) {\\r\\n            if (is_array($value)) {\\r\\n                if (is_array($value[0])) {\\r\\n                    \\/\\/nested array - convert to json\\r\\n                    $value = $modx->toJson($value);\\r\\n                } else {\\r\\n                    $value = implode(\'||\', $value); \\/\\/handle arrays (checkboxes, multiselects)\\r\\n                }\\r\\n            }\\r\\n\\r\\n\\r\\n            $inputTVkey = $formname . $field;\\r\\n\\r\\n            if ($processTVs && isset($inputTvs[$inputTVkey])) {\\r\\n                if (isset($inputTvs[$inputTVkey][\'inputTV\']) && $tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inputTvs[$inputTVkey][\'inputTV\']))) {\\r\\n\\r\\n                } else {\\r\\n                    $tv = $modx->newObject(\'modTemplateVar\');\\r\\n                    $tv->set(\'type\', $inputTvs[$inputTVkey][\'inputTVtype\']);\\r\\n                }\\r\\n                $inputTV = $inputTvs[$inputTVkey];\\r\\n\\r\\n                $mTypes = $modx->getOption(\'manipulatable_url_tv_output_types\', null, \'image,file\');\\r\\n                \\/\\/don\'t manipulate any urls here\\r\\n                $modx->setOption(\'manipulatable_url_tv_output_types\', \'\');\\r\\n                $tv->set(\'default_text\', $value);\\r\\n\\r\\n                \\/\\/ $value = $tv->renderOutput($docid); breaks if the TV used in MIGX is also assigned to this Template,\\r\\n                \\/\\/ example tv: imageLogo is assigned to the template and imageLogo is assigned to the MIGX TV as a result\\r\\n                \\/\\/ only the value of the imageLogo is returned for the MIGX TV instance\\r\\n                \\/\\/ need to override default MODX method: $value = $tv->renderOutput($docid);\\r\\n                \\/* process any TV commands in value *\\/\\r\\n                $tv_value = $tv->processBindings($value, $docid);\\r\\n                $params = $tv->get(\'output_properties\');\\r\\n                if (empty($params) || $params === null) {\\r\\n                    $params = [];\\r\\n                }\\r\\n                \\/* run prepareOutput to allow for custom overriding *\\/\\r\\n                $tv_value = $tv->prepareOutput($tv_value, $docid);\\r\\n                \\/* find the render *\\/\\r\\n                $outputRenderPaths = $tv->getRenderDirectories(\'OnTVOutputRenderList\',\'output\');\\r\\n                $value = $tv->getRender($params, $tv_value, $outputRenderPaths, \'output\', $docid, $tv->get(\'display\'));\\r\\n                \\/\\/ End override of $value = $tv->renderOutput($docid);\\r\\n\\t\\t\\t\\t\\r\\n                \\/\\/set option back\\r\\n                $modx->setOption(\'manipulatable_url_tv_output_types\', $mTypes);\\r\\n                \\/\\/now manipulate urls\\r\\n                if ($mediasource = $migx->getFieldSource($inputTV, $tv)) {\\r\\n                    $mTypes = explode(\',\', $mTypes);\\r\\n                    if (!empty($value) && in_array($tv->get(\'type\'), $mTypes)) {\\r\\n                        \\/\\/$value = $mediasource->prepareOutputUrl($value);\\r\\n                        $value = str_replace(\'\\/.\\/\', \'\\/\', $mediasource->prepareOutputUrl($value));\\r\\n                    }\\r\\n                }\\r\\n\\r\\n            }\\r\\n            $fields[$field] = $value;\\r\\n\\r\\n        }\\r\\n\\r\\n        if (!empty($addfields)) {\\r\\n            foreach ($addfields as $addfield) {\\r\\n                $addfield = explode(\':\', $addfield);\\r\\n                $addname = $addfield[0];\\r\\n                $adddefault = isset($addfield[1]) ? $addfield[1] : \'\';\\r\\n                $fields[$addname] = $adddefault;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!empty($sumFields)) {\\r\\n            $sumFields = is_array($sumFields) ? $sumFields : explode(\',\', $sumFields);\\r\\n            foreach ($sumFields as $sumField) {\\r\\n                if (isset($fields[$sumField])) {\\r\\n                    $summaries[$sumPrefix . $sumField] = $summaries[$sumPrefix . $sumField] + $fields[$sumField];\\r\\n                    $fields[$sumPrefix . $sumField] = $summaries[$sumPrefix . $sumField];\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        if ($toJsonPlaceholder) {\\r\\n            $output[] = $fields;\\r\\n        } else {\\r\\n            $fields[\'_alt\'] = $idx % 2;\\r\\n            $idx++;\\r\\n            $fields[\'_first\'] = $idx == 1 ? true : \'\';\\r\\n            $fields[\'_last\'] = $idx == $limit ? true : \'\';\\r\\n            $fields[\'idx\'] = $idx;\\r\\n            $rowtpl = \'\';\\r\\n            \\/\\/get changing tpls from field\\r\\n            if (substr($tpl, 0, 7) == \\"@FIELD:\\") {\\r\\n                $tplField = substr($tpl, 7);\\r\\n                $rowtpl = $fields[$tplField];\\r\\n            }\\r\\n\\r\\n            if ($fields[\'_first\'] && !empty($tplFirst)) {\\r\\n                $rowtpl = $tplFirst;\\r\\n            }\\r\\n            if ($fields[\'_last\'] && empty($rowtpl) && !empty($tplLast)) {\\r\\n                $rowtpl = $tplLast;\\r\\n            }\\r\\n            $tplidx = \'tpl_\' . $idx;\\r\\n            if (empty($rowtpl) && !empty($$tplidx)) {\\r\\n                $rowtpl = $$tplidx;\\r\\n            }\\r\\n            if ($idx > 1 && empty($rowtpl)) {\\r\\n                $divisors = $migx->getDivisors($idx);\\r\\n                if (!empty($divisors)) {\\r\\n                    foreach ($divisors as $divisor) {\\r\\n                        $tplnth = \'tpl_n\' . $divisor;\\r\\n                        if (!empty($$tplnth)) {\\r\\n                            $rowtpl = $$tplnth;\\r\\n                            if (!empty($rowtpl)) {\\r\\n                                break;\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if ($count == 1 && isset($tpl_oneresult)) {\\r\\n                $rowtpl = $tpl_oneresult;\\r\\n            }\\r\\n\\r\\n            $fields = array_merge($fields, $properties);\\r\\n\\r\\n            if (!empty($rowtpl)) {\\r\\n                $template = $migx->getTemplate($tpl, $template);\\r\\n                $fields[\'_tpl\'] = $template[$tpl];\\r\\n            } else {\\r\\n                $rowtpl = $tpl;\\r\\n\\r\\n            }\\r\\n            $template = $migx->getTemplate($rowtpl, $template);\\r\\n\\r\\n\\r\\n            if ($template[$rowtpl]) {\\r\\n                $chunk = $modx->newObject(\'modChunk\');\\r\\n                $chunk->setCacheable(false);\\r\\n                $chunk->setContent($template[$rowtpl]);\\r\\n\\r\\n\\r\\n                if (!empty($placeholdersKeyField) && isset($fields[$placeholdersKeyField])) {\\r\\n                    $output[$fields[$placeholdersKeyField]] = $chunk->process($fields);\\r\\n                } else {\\r\\n                    $output[] = $chunk->process($fields);\\r\\n                }\\r\\n            } else {\\r\\n                if (!empty($placeholdersKeyField)) {\\r\\n                    $output[$fields[$placeholdersKeyField]] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\r\\n                } else {\\r\\n                    $output[] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n    }\\r\\n}\\r\\n\\r\\nif (count($summaries) > 0) {\\r\\n    $modx->toPlaceholders($summaries);\\r\\n}\\r\\n\\r\\n\\r\\nif ($toJsonPlaceholder) {\\r\\n    $modx->setPlaceholder($toJsonPlaceholder, $modx->toJson($output));\\r\\n    return \'\';\\r\\n}\\r\\n\\r\\nif (!empty($toSeparatePlaceholders)) {\\r\\n    $modx->toPlaceholders($output, $toSeparatePlaceholders);\\r\\n    return \'\';\\r\\n}\\r\\n\\/*\\r\\nif (!empty($outerTpl))\\r\\n$o = parseTpl($outerTpl, array(\'output\'=>implode($outputSeparator, $output)));\\r\\nelse \\r\\n*\\/\\r\\n\\r\\nif ($count > 0 && $splits > 0) {\\r\\n    $size = ceil($count \\/ $splits);\\r\\n    $chunks = array_chunk($output, $size);\\r\\n    $output = array();\\r\\n    foreach ($chunks as $chunk) {\\r\\n        $o = implode($outputSeparator, $chunk);\\r\\n        $output[] = $modx->getChunk($splitTpl, array(\'output\' => $o));\\r\\n    }\\r\\n    $outputSeparator = $splitSeparator;\\r\\n}\\r\\n\\r\\nif (is_array($output)) {\\r\\n    $o = implode($outputSeparator, $output);\\r\\n} else {\\r\\n    $o = $output;\\r\\n}\\r\\n\\r\\nif (!empty($o) && !empty($wrapperTpl)) {\\r\\n    $template = $migx->getTemplate($wrapperTpl);\\r\\n    if ($template[$wrapperTpl]) {\\r\\n        $chunk = $modx->newObject(\'modChunk\');\\r\\n        $chunk->setCacheable(false);\\r\\n        $chunk->setContent($template[$wrapperTpl]);\\r\\n        $properties[\'output\'] = $o;\\r\\n        $o = $chunk->process($properties);\\r\\n    }\\r\\n}\\r\\n\\r\\nif (empty($o) && !empty($emptyTpl)) {\\r\\n    $template = $migx->getTemplate($emptyTpl);\\r\\n    if ($template[$emptyTpl]) {\\r\\n        $chunk = $modx->newObject(\'modChunk\');\\r\\n        $chunk->setCacheable(false);\\r\\n        $chunk->setContent($template[$emptyTpl]);\\r\\n        $o = $chunk->process($properties);\\r\\n    }\\r\\n}\\r\\n\\r\\nif (!empty($toPlaceholder)) {\\r\\n    $modx->setPlaceholder($toPlaceholder, $o);\\r\\n    return \'\';\\r\\n}\\r\\n\\r\\nreturn $o;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * getImageList\\r\\n *\\r\\n * Copyright 2009-2014 by Bruno Perner <b.perner@gmx.de>\\r\\n *\\r\\n * getImageList is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * getImageList is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * getImageList; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package migx\\r\\n *\\/\\r\\n\\/**\\r\\n * getImageList\\r\\n *\\r\\n * display Items from outputvalue of TV with custom-TV-input-type MIGX or from other JSON-string for MODx Revolution \\r\\n *\\r\\n * @version 1.4\\r\\n * @author Bruno Perner <b.perner@gmx.de>\\r\\n * @copyright Copyright &copy; 2009-2014\\r\\n * @license http:\\/\\/www.gnu.org\\/licenses\\/old-licenses\\/gpl-2.0.html GNU General Public License\\r\\n * version 2 or (at your option) any later version.\\r\\n * @package migx\\r\\n *\\/\\r\\n\\r\\n\\/*example: <ul>[[!getImageList? &tvname=`myTV`&tpl=`@CODE:<li>[[+idx]]<img src=\\"[[+imageURL]]\\"\\/><p>[[+imageAlt]]<\\/p><\\/li>`]]<\\/ul>*\\/\\r\\n\\/* get default properties *\\/\\r\\n\\r\\n$allow_request = (bool)$modx->getOption(\'allowRequest\', $scriptProperties, false);\\r\\n$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\r\\n$inherit_children_tvname = $modx->getOption(\'inherit_children_tvname\', $scriptProperties, \'\');\\r\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\r\\n$wrapperTpl = $modx->getOption(\'wrapperTpl\', $scriptProperties, \'\');\\r\\n$emptyTpl = $modx->getOption(\'emptyTpl\', $scriptProperties, \'\'); \\r\\n$limit = $modx->getOption(\'limit\', $scriptProperties, \'0\');\\r\\n$offset = $modx->getOption(\'offset\', $scriptProperties, 0);\\r\\n$totalVar = $modx->getOption(\'totalVar\', $scriptProperties, \'total\');\\r\\n$randomize = $modx->getOption(\'randomize\', $scriptProperties, false);\\r\\n$preselectLimit = $modx->getOption(\'preselectLimit\', $scriptProperties, 0); \\/\\/ when random preselect important images\\r\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\r\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\r\\n$sort = $modx->getOption(\'sort\', $scriptProperties, \'\');\\r\\n$sort = !empty($sort) ? $modx->fromJSON($sort) : array();\\r\\n$toSeparatePlaceholders = $modx->getOption(\'toSeparatePlaceholders\', $scriptProperties, false);\\r\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\r\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \'\');\\r\\n$splitSeparator = $modx->getOption(\'splitSeparator\', $scriptProperties, \'\');\\r\\n$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'MIGX_id\');\\r\\n$toJsonPlaceholder = $modx->getOption(\'toJsonPlaceholder\', $scriptProperties, false);\\r\\n$jsonVarKey = $modx->getOption(\'jsonVarKey\', $scriptProperties, \'migx_outputvalue\');\\r\\n$outputvalue = $modx->getOption(\'value\', $scriptProperties, \'\');\\r\\nif ($allow_request) {\\r\\n    $outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\r\\n}\\r\\n$docidVarKey = $modx->getOption(\'docidVarKey\', $scriptProperties, \'migx_docid\');\\r\\n$docid = $modx->getOption(\'docid\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : 1));\\r\\nif ($allow_request) {\\r\\n    $docid = isset($_REQUEST[$docidVarKey]) ? $_REQUEST[$docidVarKey] : $docid;\\r\\n}\\r\\n$processTVs = $modx->getOption(\'processTVs\', $scriptProperties, \'1\');\\r\\n$reverse = $modx->getOption(\'reverse\', $scriptProperties, \'0\');\\r\\n$sumFields = $modx->getOption(\'sumFields\', $scriptProperties, \'\');\\r\\n$sumPrefix = $modx->getOption(\'sumPrefix\', $scriptProperties, \'summary_\');\\r\\n$addfields = $modx->getOption(\'addfields\', $scriptProperties, \'\');\\r\\n$addfields = !empty($addfields) ? explode(\',\', $addfields) : null;\\r\\n\\/\\/split json into parts\\r\\n$splits = $modx->fromJson($modx->getOption(\'splits\', $scriptProperties, 0));\\r\\n$splitTpl = $modx->getOption(\'splitTpl\', $scriptProperties, \'\');\\r\\n$splitSeparator = $modx->getOption(\'splitSeparator\', $scriptProperties, \'\');\\r\\n$inheritFrom = $modx->getOption(\'inheritFrom\', $scriptProperties, \'\'); \\/\\/commaseparated list of resource-ids or\\/and the keyword \'parents\' where to inherit from\\r\\n$inheritFrom = !empty($inheritFrom) ? explode(\',\', $inheritFrom) : \'\';\\r\\n\\r\\n$modx->setPlaceholder(\'docid\', $docid);\\r\\n\\r\\n$base_path = $modx->getOption(\'base_path\', null, MODX_BASE_PATH);\\r\\n$base_url = $modx->getOption(\'base_url\', null, MODX_BASE_URL);\\r\\n\\r\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\r\\nif (!($migx instanceof Migx))\\r\\n    return \'\';\\r\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : \'web\';\\r\\n\\r\\nif (!empty($tvname)) {\\r\\n    if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname))) {\\r\\n\\r\\n        \\/*\\r\\n        *   get inputProperties\\r\\n        *\\/\\r\\n\\r\\n\\r\\n        $properties = $tv->get(\'input_properties\');\\r\\n        $properties = isset($properties[\'formtabs\']) ? $properties : $tv->getProperties();\\r\\n\\r\\n        $migx->config[\'configs\'] = $modx->getOption(\'configs\', $properties, \'\');\\r\\n        if (!empty($migx->config[\'configs\'])) {\\r\\n            $migx->loadConfigs();\\r\\n            \\/\\/ get tabs from file or migx-config-table\\r\\n            $formtabs = $migx->getTabs();\\r\\n        }\\r\\n        if (empty($formtabs) && isset($properties[\'formtabs\'])) {\\r\\n            \\/\\/try to get formtabs and its fields from properties\\r\\n            $formtabs = $modx->fromJSON($properties[\'formtabs\']);\\r\\n        }\\r\\n\\r\\n        if (!empty($properties[\'basePath\'])) {\\r\\n            if ($properties[\'autoResourceFolders\'] == \'true\') {\\r\\n                $scriptProperties[\'base_path\'] = $base_path . $properties[\'basePath\'] . $docid . \'\\/\';\\r\\n                $scriptProperties[\'base_url\'] = $base_url . $properties[\'basePath\'] . $docid . \'\\/\';\\r\\n            } else {\\r\\n                $scriptProperties[\'base_path\'] = $base_path . $properties[\'base_path\'];\\r\\n                $scriptProperties[\'base_url\'] = $base_url . $properties[\'basePath\'];\\r\\n            }\\r\\n        }\\r\\n        if ($jsonVarKey == \'migx_outputvalue\' && !empty($properties[\'jsonvarkey\'])) {\\r\\n            $jsonVarKey = $properties[\'jsonvarkey\'];\\r\\n            $outputvalue = $allow_request && isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\r\\n        }\\r\\n\\r\\n        if (empty($outputvalue)) {\\r\\n            $outputvalue = $tv->renderOutput($docid);\\r\\n            if (empty($outputvalue) && !empty($inheritFrom)) {\\r\\n                foreach ($inheritFrom as $from) {\\r\\n                    if ($from == \'parents\') {\\r\\n                        if (!empty($inherit_children_tvname)){\\r\\n                            \\/\\/try to get items from optional MIGX-TV for children\\r\\n                            if ($inh_tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inherit_children_tvname))) {\\r\\n                                $outputvalue = $inh_tv->processInheritBinding(\'\', $docid);    \\r\\n                            }\\r\\n                        }\\r\\n                        $outputvalue = empty($outputvalue) ? $tv->processInheritBinding(\'\', $docid) : $outputvalue;\\r\\n                    } else {\\r\\n                        $outputvalue = $tv->renderOutput($from);\\r\\n                    }\\r\\n                    if (!empty($outputvalue)) {\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        \\/*\\r\\n        *   get inputTvs \\r\\n        *\\/\\r\\n        $inputTvs = array();\\r\\n        if (is_array($formtabs)) {\\r\\n\\r\\n            \\/\\/multiple different Forms\\r\\n            \\/\\/ Note: use same field-names and inputTVs in all forms\\r\\n            $inputTvs = $migx->extractInputTvs($formtabs);\\r\\n        }\\r\\n        if ($migx->source = $tv->getSource($migx->working_context, false)) {\\r\\n            $migx->source->initialize();\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\nif (empty($outputvalue)) {\\r\\n    $modx->setPlaceholder($totalVar, 0);\\r\\n    return \'\';\\r\\n}\\r\\n\\r\\n\\/\\/echo $outputvalue.\'<br\\/><br\\/>\';\\r\\n\\r\\n$items = $modx->fromJSON($outputvalue);\\r\\n\\r\\n\\/\\/ where filter\\r\\nif (is_array($where) && count($where) > 0) {\\r\\n    $items = $migx->filterItems($where, $items);\\r\\n}\\r\\n$modx->setPlaceholder($totalVar, count($items));\\r\\n\\r\\nif (!empty($reverse)) {\\r\\n    $items = array_reverse($items);\\r\\n}\\r\\n\\r\\n\\/\\/ sort items\\r\\nif (is_array($sort) && count($sort) > 0) {\\r\\n    $items = $migx->sortDbResult($items, $sort);\\r\\n}\\r\\n\\r\\n$summaries = array();\\r\\n$output = \'\';\\r\\n$items = $offset > 0 ? array_slice($items, $offset) : $items;\\r\\n$count = count($items);\\r\\n\\r\\nif ($count > 0) {\\r\\n    $limit = $limit == 0 || $limit > $count ? $count : $limit;\\r\\n    $preselectLimit = $preselectLimit > $count ? $count : $preselectLimit;\\r\\n    \\/\\/preselect important items\\r\\n    $preitems = array();\\r\\n    if ($randomize && $preselectLimit > 0) {\\r\\n        for ($i = 0; $i < $preselectLimit; $i++) {\\r\\n            $preitems[] = $items[$i];\\r\\n            unset($items[$i]);\\r\\n        }\\r\\n        $limit = $limit - count($preitems);\\r\\n    }\\r\\n\\r\\n    \\/\\/shuffle items\\r\\n    if ($randomize) {\\r\\n        shuffle($items);\\r\\n    }\\r\\n\\r\\n    \\/\\/limit items\\r\\n    $count = count($items);\\r\\n    $tempitems = array();\\r\\n\\r\\n    for ($i = 0; $i < $limit; $i++) {\\r\\n        if ($i >= $count) {\\r\\n            break;\\r\\n        }\\r\\n        $tempitems[] = $items[$i];\\r\\n    }\\r\\n    $items = $tempitems;\\r\\n\\r\\n    \\/\\/add preselected items and schuffle again\\r\\n    if ($randomize && $preselectLimit > 0) {\\r\\n        $items = array_merge($preitems, $items);\\r\\n        shuffle($items);\\r\\n    }\\r\\n\\r\\n    $properties = array();\\r\\n    foreach ($scriptProperties as $property => $value) {\\r\\n        $properties[\'property.\' . $property] = $value;\\r\\n    }\\r\\n\\r\\n    $idx = 0;\\r\\n    $output = array();\\r\\n    $template = array();\\r\\n    $count = count($items);\\r\\n\\r\\n    foreach ($items as $key => $item) {\\r\\n        $formname = isset($item[\'MIGX_formname\']) ? $item[\'MIGX_formname\'] . \'_\' : \'\';\\r\\n        $fields = array();\\r\\n        foreach ($item as $field => $value) {\\r\\n            if (is_array($value)) {\\r\\n                if (is_array($value[0])) {\\r\\n                    \\/\\/nested array - convert to json\\r\\n                    $value = $modx->toJson($value);\\r\\n                } else {\\r\\n                    $value = implode(\'||\', $value); \\/\\/handle arrays (checkboxes, multiselects)\\r\\n                }\\r\\n            }\\r\\n\\r\\n\\r\\n            $inputTVkey = $formname . $field;\\r\\n\\r\\n            if ($processTVs && isset($inputTvs[$inputTVkey])) {\\r\\n                if (isset($inputTvs[$inputTVkey][\'inputTV\']) && $tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inputTvs[$inputTVkey][\'inputTV\']))) {\\r\\n\\r\\n                } else {\\r\\n                    $tv = $modx->newObject(\'modTemplateVar\');\\r\\n                    $tv->set(\'type\', $inputTvs[$inputTVkey][\'inputTVtype\']);\\r\\n                }\\r\\n                $inputTV = $inputTvs[$inputTVkey];\\r\\n\\r\\n                $mTypes = $modx->getOption(\'manipulatable_url_tv_output_types\', null, \'image,file\');\\r\\n                \\/\\/don\'t manipulate any urls here\\r\\n                $modx->setOption(\'manipulatable_url_tv_output_types\', \'\');\\r\\n                $tv->set(\'default_text\', $value);\\r\\n\\r\\n                \\/\\/ $value = $tv->renderOutput($docid); breaks if the TV used in MIGX is also assigned to this Template,\\r\\n                \\/\\/ example tv: imageLogo is assigned to the template and imageLogo is assigned to the MIGX TV as a result\\r\\n                \\/\\/ only the value of the imageLogo is returned for the MIGX TV instance\\r\\n                \\/\\/ need to override default MODX method: $value = $tv->renderOutput($docid);\\r\\n                \\/* process any TV commands in value *\\/\\r\\n                $tv_value = $tv->processBindings($value, $docid);\\r\\n                $params = $tv->get(\'output_properties\');\\r\\n                if (empty($params) || $params === null) {\\r\\n                    $params = [];\\r\\n                }\\r\\n                \\/* run prepareOutput to allow for custom overriding *\\/\\r\\n                $tv_value = $tv->prepareOutput($tv_value, $docid);\\r\\n                \\/* find the render *\\/\\r\\n                $outputRenderPaths = $tv->getRenderDirectories(\'OnTVOutputRenderList\',\'output\');\\r\\n                $value = $tv->getRender($params, $tv_value, $outputRenderPaths, \'output\', $docid, $tv->get(\'display\'));\\r\\n                \\/\\/ End override of $value = $tv->renderOutput($docid);\\r\\n\\t\\t\\t\\t\\r\\n                \\/\\/set option back\\r\\n                $modx->setOption(\'manipulatable_url_tv_output_types\', $mTypes);\\r\\n                \\/\\/now manipulate urls\\r\\n                if ($mediasource = $migx->getFieldSource($inputTV, $tv)) {\\r\\n                    $mTypes = explode(\',\', $mTypes);\\r\\n                    if (!empty($value) && in_array($tv->get(\'type\'), $mTypes)) {\\r\\n                        \\/\\/$value = $mediasource->prepareOutputUrl($value);\\r\\n                        $value = str_replace(\'\\/.\\/\', \'\\/\', $mediasource->prepareOutputUrl($value));\\r\\n                    }\\r\\n                }\\r\\n\\r\\n            }\\r\\n            $fields[$field] = $value;\\r\\n\\r\\n        }\\r\\n\\r\\n        if (!empty($addfields)) {\\r\\n            foreach ($addfields as $addfield) {\\r\\n                $addfield = explode(\':\', $addfield);\\r\\n                $addname = $addfield[0];\\r\\n                $adddefault = isset($addfield[1]) ? $addfield[1] : \'\';\\r\\n                $fields[$addname] = $adddefault;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!empty($sumFields)) {\\r\\n            $sumFields = is_array($sumFields) ? $sumFields : explode(\',\', $sumFields);\\r\\n            foreach ($sumFields as $sumField) {\\r\\n                if (isset($fields[$sumField])) {\\r\\n                    $summaries[$sumPrefix . $sumField] = $summaries[$sumPrefix . $sumField] + $fields[$sumField];\\r\\n                    $fields[$sumPrefix . $sumField] = $summaries[$sumPrefix . $sumField];\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        if ($toJsonPlaceholder) {\\r\\n            $output[] = $fields;\\r\\n        } else {\\r\\n            $fields[\'_alt\'] = $idx % 2;\\r\\n            $idx++;\\r\\n            $fields[\'_first\'] = $idx == 1 ? true : \'\';\\r\\n            $fields[\'_last\'] = $idx == $limit ? true : \'\';\\r\\n            $fields[\'idx\'] = $idx;\\r\\n            $rowtpl = \'\';\\r\\n            \\/\\/get changing tpls from field\\r\\n            if (substr($tpl, 0, 7) == \\"@FIELD:\\") {\\r\\n                $tplField = substr($tpl, 7);\\r\\n                $rowtpl = $fields[$tplField];\\r\\n            }\\r\\n\\r\\n            if ($fields[\'_first\'] && !empty($tplFirst)) {\\r\\n                $rowtpl = $tplFirst;\\r\\n            }\\r\\n            if ($fields[\'_last\'] && empty($rowtpl) && !empty($tplLast)) {\\r\\n                $rowtpl = $tplLast;\\r\\n            }\\r\\n            $tplidx = \'tpl_\' . $idx;\\r\\n            if (empty($rowtpl) && !empty($$tplidx)) {\\r\\n                $rowtpl = $$tplidx;\\r\\n            }\\r\\n            if ($idx > 1 && empty($rowtpl)) {\\r\\n                $divisors = $migx->getDivisors($idx);\\r\\n                if (!empty($divisors)) {\\r\\n                    foreach ($divisors as $divisor) {\\r\\n                        $tplnth = \'tpl_n\' . $divisor;\\r\\n                        if (!empty($$tplnth)) {\\r\\n                            $rowtpl = $$tplnth;\\r\\n                            if (!empty($rowtpl)) {\\r\\n                                break;\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if ($count == 1 && isset($tpl_oneresult)) {\\r\\n                $rowtpl = $tpl_oneresult;\\r\\n            }\\r\\n\\r\\n            $fields = array_merge($fields, $properties);\\r\\n\\r\\n            if (!empty($rowtpl)) {\\r\\n                $template = $migx->getTemplate($tpl, $template);\\r\\n                $fields[\'_tpl\'] = $template[$tpl];\\r\\n            } else {\\r\\n                $rowtpl = $tpl;\\r\\n\\r\\n            }\\r\\n            $template = $migx->getTemplate($rowtpl, $template);\\r\\n\\r\\n\\r\\n            if ($template[$rowtpl]) {\\r\\n                $chunk = $modx->newObject(\'modChunk\');\\r\\n                $chunk->setCacheable(false);\\r\\n                $chunk->setContent($template[$rowtpl]);\\r\\n\\r\\n\\r\\n                if (!empty($placeholdersKeyField) && isset($fields[$placeholdersKeyField])) {\\r\\n                    $output[$fields[$placeholdersKeyField]] = $chunk->process($fields);\\r\\n                } else {\\r\\n                    $output[] = $chunk->process($fields);\\r\\n                }\\r\\n            } else {\\r\\n                if (!empty($placeholdersKeyField)) {\\r\\n                    $output[$fields[$placeholdersKeyField]] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\r\\n                } else {\\r\\n                    $output[] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n    }\\r\\n}\\r\\n\\r\\nif (count($summaries) > 0) {\\r\\n    $modx->toPlaceholders($summaries);\\r\\n}\\r\\n\\r\\n\\r\\nif ($toJsonPlaceholder) {\\r\\n    $modx->setPlaceholder($toJsonPlaceholder, $modx->toJson($output));\\r\\n    return \'\';\\r\\n}\\r\\n\\r\\nif (!empty($toSeparatePlaceholders)) {\\r\\n    $modx->toPlaceholders($output, $toSeparatePlaceholders);\\r\\n    return \'\';\\r\\n}\\r\\n\\/*\\r\\nif (!empty($outerTpl))\\r\\n$o = parseTpl($outerTpl, array(\'output\'=>implode($outputSeparator, $output)));\\r\\nelse \\r\\n*\\/\\r\\n\\r\\nif ($count > 0 && $splits > 0) {\\r\\n    $size = ceil($count \\/ $splits);\\r\\n    $chunks = array_chunk($output, $size);\\r\\n    $output = array();\\r\\n    foreach ($chunks as $chunk) {\\r\\n        $o = implode($outputSeparator, $chunk);\\r\\n        $output[] = $modx->getChunk($splitTpl, array(\'output\' => $o));\\r\\n    }\\r\\n    $outputSeparator = $splitSeparator;\\r\\n}\\r\\n\\r\\nif (is_array($output)) {\\r\\n    $o = implode($outputSeparator, $output);\\r\\n} else {\\r\\n    $o = $output;\\r\\n}\\r\\n\\r\\nif (!empty($o) && !empty($wrapperTpl)) {\\r\\n    $template = $migx->getTemplate($wrapperTpl);\\r\\n    if ($template[$wrapperTpl]) {\\r\\n        $chunk = $modx->newObject(\'modChunk\');\\r\\n        $chunk->setCacheable(false);\\r\\n        $chunk->setContent($template[$wrapperTpl]);\\r\\n        $properties[\'output\'] = $o;\\r\\n        $o = $chunk->process($properties);\\r\\n    }\\r\\n}\\r\\n\\r\\nif (empty($o) && !empty($emptyTpl)) {\\r\\n    $template = $migx->getTemplate($emptyTpl);\\r\\n    if ($template[$emptyTpl]) {\\r\\n        $chunk = $modx->newObject(\'modChunk\');\\r\\n        $chunk->setCacheable(false);\\r\\n        $chunk->setContent($template[$emptyTpl]);\\r\\n        $o = $chunk->process($properties);\\r\\n    }\\r\\n}\\r\\n\\r\\nif (!empty($toPlaceholder)) {\\r\\n    $modx->setPlaceholder($toPlaceholder, $o);\\r\\n    return \'\';\\r\\n}\\r\\n\\r\\nreturn $o;"}',
        'guid' => 'a850e2b71e5425930a00f50cf422cc05',
        'native_key' => NULL,
        'signature' => '7fa8a479111c3e037094d4a2f9439d3d',
      ),
      '71cd897a8309fea67a2b22c0e6bcc445' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxGetRelations","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$id = $modx->getOption(\'id\', $scriptProperties, $modx->resource->get(\'id\'));\\r\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, \'\');\\r\\n$element = $modx->getOption(\'element\', $scriptProperties, \'getResources\');\\r\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \',\');\\r\\n$sourceWhere = $modx->getOption(\'sourceWhere\', $scriptProperties, \'\');\\r\\n$ignoreRelationIfEmpty = $modx->getOption(\'ignoreRelationIfEmpty\', $scriptProperties, false);\\r\\n$inheritFromParents = $modx->getOption(\'inheritFromParents\', $scriptProperties, false);\\r\\n$parentIDs = $inheritFromParents ? array_merge(array($id), $modx->getParentIds($id)) : array($id);\\r\\n\\r\\n$packageName = \'resourcerelations\';\\r\\n\\r\\n$packagepath = $modx->getOption(\'core_path\') . \'components\\/\' . $packageName . \'\\/\';\\r\\n$modelpath = $packagepath . \'model\\/\';\\r\\n\\r\\n$modx->addPackage($packageName, $modelpath, $prefix);\\r\\n$classname = \'rrResourceRelation\';\\r\\n$output = \'\';\\r\\n\\r\\nforeach ($parentIDs as $id) {\\r\\n    if (!empty($id)) {\\r\\n        $output = \'\';\\r\\n                \\r\\n        $c = $modx->newQuery($classname, array(\'target_id\' => $id, \'published\' => \'1\'));\\r\\n        $c->select($modx->getSelectColumns($classname, $c->getAlias()));\\r\\n\\r\\n        if (!empty($sourceWhere)) {\\r\\n            $sourceWhere_ar = $modx->fromJson($sourceWhere);\\r\\n            if (is_array($sourceWhere_ar)) {\\r\\n                $where = array();\\r\\n                foreach ($sourceWhere_ar as $key => $value) {\\r\\n                    $where[\'Source.\' . $key] = $value;\\r\\n                }\\r\\n                $joinclass = \'modResource\';\\r\\n                $joinalias = \'Source\';\\r\\n                $selectfields = \'id\';\\r\\n                $selectfields = !empty($selectfields) ? explode(\',\', $selectfields) : null;\\r\\n                $c->leftjoin($joinclass, $joinalias);\\r\\n                $c->select($modx->getSelectColumns($joinclass, $joinalias, $joinalias . \'_\', $selectfields));\\r\\n                $c->where($where);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        \\/\\/$c->prepare(); echo $c->toSql();\\r\\n        if ($c->prepare() && $c->stmt->execute()) {\\r\\n            $collection = $c->stmt->fetchAll(PDO::FETCH_ASSOC);\\r\\n        }\\r\\n        \\r\\n        foreach ($collection as $row) {\\r\\n            $ids[] = $row[\'source_id\'];\\r\\n        }\\r\\n        $output = implode($outputSeparator, $ids);\\r\\n    }\\r\\n    if (!empty($output)){\\r\\n        break;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nif (!empty($element)) {\\r\\n    if (empty($output) && $ignoreRelationIfEmpty) {\\r\\n        return $modx->runSnippet($element, $scriptProperties);\\r\\n    } else {\\r\\n        $scriptProperties[\'resources\'] = $output;\\r\\n        $scriptProperties[\'parents\'] = \'9999999\';\\r\\n        return $modx->runSnippet($element, $scriptProperties);\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\nif (!empty($toPlaceholder)) {\\r\\n    $modx->setPlaceholder($toPlaceholder, $output);\\r\\n    return \'\';\\r\\n}\\r\\n\\r\\nreturn $output;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"$id = $modx->getOption(\'id\', $scriptProperties, $modx->resource->get(\'id\'));\\r\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, \'\');\\r\\n$element = $modx->getOption(\'element\', $scriptProperties, \'getResources\');\\r\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \',\');\\r\\n$sourceWhere = $modx->getOption(\'sourceWhere\', $scriptProperties, \'\');\\r\\n$ignoreRelationIfEmpty = $modx->getOption(\'ignoreRelationIfEmpty\', $scriptProperties, false);\\r\\n$inheritFromParents = $modx->getOption(\'inheritFromParents\', $scriptProperties, false);\\r\\n$parentIDs = $inheritFromParents ? array_merge(array($id), $modx->getParentIds($id)) : array($id);\\r\\n\\r\\n$packageName = \'resourcerelations\';\\r\\n\\r\\n$packagepath = $modx->getOption(\'core_path\') . \'components\\/\' . $packageName . \'\\/\';\\r\\n$modelpath = $packagepath . \'model\\/\';\\r\\n\\r\\n$modx->addPackage($packageName, $modelpath, $prefix);\\r\\n$classname = \'rrResourceRelation\';\\r\\n$output = \'\';\\r\\n\\r\\nforeach ($parentIDs as $id) {\\r\\n    if (!empty($id)) {\\r\\n        $output = \'\';\\r\\n                \\r\\n        $c = $modx->newQuery($classname, array(\'target_id\' => $id, \'published\' => \'1\'));\\r\\n        $c->select($modx->getSelectColumns($classname, $c->getAlias()));\\r\\n\\r\\n        if (!empty($sourceWhere)) {\\r\\n            $sourceWhere_ar = $modx->fromJson($sourceWhere);\\r\\n            if (is_array($sourceWhere_ar)) {\\r\\n                $where = array();\\r\\n                foreach ($sourceWhere_ar as $key => $value) {\\r\\n                    $where[\'Source.\' . $key] = $value;\\r\\n                }\\r\\n                $joinclass = \'modResource\';\\r\\n                $joinalias = \'Source\';\\r\\n                $selectfields = \'id\';\\r\\n                $selectfields = !empty($selectfields) ? explode(\',\', $selectfields) : null;\\r\\n                $c->leftjoin($joinclass, $joinalias);\\r\\n                $c->select($modx->getSelectColumns($joinclass, $joinalias, $joinalias . \'_\', $selectfields));\\r\\n                $c->where($where);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        \\/\\/$c->prepare(); echo $c->toSql();\\r\\n        if ($c->prepare() && $c->stmt->execute()) {\\r\\n            $collection = $c->stmt->fetchAll(PDO::FETCH_ASSOC);\\r\\n        }\\r\\n        \\r\\n        foreach ($collection as $row) {\\r\\n            $ids[] = $row[\'source_id\'];\\r\\n        }\\r\\n        $output = implode($outputSeparator, $ids);\\r\\n    }\\r\\n    if (!empty($output)){\\r\\n        break;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nif (!empty($element)) {\\r\\n    if (empty($output) && $ignoreRelationIfEmpty) {\\r\\n        return $modx->runSnippet($element, $scriptProperties);\\r\\n    } else {\\r\\n        $scriptProperties[\'resources\'] = $output;\\r\\n        $scriptProperties[\'parents\'] = \'9999999\';\\r\\n        return $modx->runSnippet($element, $scriptProperties);\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\nif (!empty($toPlaceholder)) {\\r\\n    $modx->setPlaceholder($toPlaceholder, $output);\\r\\n    return \'\';\\r\\n}\\r\\n\\r\\nreturn $output;"}',
        'guid' => '61f693fe7ec2b52ef9e634fe38fc3f38',
        'native_key' => NULL,
        'signature' => 'c60f25d17c0dc3949d0fbb8e7af153b0',
      ),
      '9dfeafe63e92c02030cbe3bfe4427968' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migx","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\r\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\r\\n$limit = $modx->getOption(\'limit\', $scriptProperties, \'0\');\\r\\n$offset = $modx->getOption(\'offset\', $scriptProperties, 0);\\r\\n$totalVar = $modx->getOption(\'totalVar\', $scriptProperties, \'total\');\\r\\n$randomize = $modx->getOption(\'randomize\', $scriptProperties, false);\\r\\n$preselectLimit = $modx->getOption(\'preselectLimit\', $scriptProperties, 0); \\/\\/ when random preselect important images\\r\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\r\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\r\\n$sortConfig = $modx->getOption(\'sortConfig\', $scriptProperties, \'\');\\r\\n$sortConfig = !empty($sortConfig) ? $modx->fromJSON($sortConfig) : array();\\r\\n$configs = $modx->getOption(\'configs\', $scriptProperties, \'\');\\r\\n$configs = !empty($configs) ? explode(\',\',$configs):array();\\r\\n$toSeparatePlaceholders = $modx->getOption(\'toSeparatePlaceholders\', $scriptProperties, false);\\r\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\r\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \'\');\\r\\n\\/\\/$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'MIGX_id\');\\r\\n$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'id\');\\r\\n$toJsonPlaceholder = $modx->getOption(\'toJsonPlaceholder\', $scriptProperties, false);\\r\\n$jsonVarKey = $modx->getOption(\'jsonVarKey\', $scriptProperties, \'migx_outputvalue\');\\r\\n$outputvalue = $modx->getOption(\'value\', $scriptProperties, \'\');\\r\\n$outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\r\\n$docidVarKey = $modx->getOption(\'docidVarKey\', $scriptProperties, \'migx_docid\');\\r\\n$docid = $modx->getOption(\'docid\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : 1));\\r\\n$docid = isset($_REQUEST[$docidVarKey]) ? $_REQUEST[$docidVarKey] : $docid;\\r\\n$processTVs = $modx->getOption(\'processTVs\', $scriptProperties, \'1\');\\r\\n\\r\\n$base_path = $modx->getOption(\'base_path\', null, MODX_BASE_PATH);\\r\\n$base_url = $modx->getOption(\'base_url\', null, MODX_BASE_URL);\\r\\n\\r\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\r\\nif (!($migx instanceof Migx))\\r\\n    return \'\';\\r\\n\\/\\/$modx->migx = &$migx;\\r\\n$defaultcontext = \'web\';\\r\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\r\\n\\r\\nif (!empty($tvname))\\r\\n{\\r\\n    if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname)))\\r\\n    {\\r\\n\\r\\n        \\/*\\r\\n        *   get inputProperties\\r\\n        *\\/\\r\\n\\r\\n\\r\\n        $properties = $tv->get(\'input_properties\');\\r\\n        $properties = isset($properties[\'configs\']) ? $properties : $tv->getProperties();\\r\\n        $cfgs = $modx->getOption(\'configs\',$properties,\'\');\\r\\n        if (!empty($cfgs)){\\r\\n            $cfgs = explode(\',\',$cfgs);\\r\\n            $configs = array_merge($configs,$cfgs);\\r\\n           \\r\\n        }\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\/\\/$migx->config[\'configs\'] = implode(\',\',$configs);\\r\\n$migx->loadConfigs(false,true,array(\'configs\'=>implode(\',\',$configs)));\\r\\n$migx->customconfigs = array_merge($migx->customconfigs,$scriptProperties);\\r\\n\\r\\n\\r\\n\\r\\n\\/\\/ get tabs from file or migx-config-table\\r\\n$formtabs = $migx->getTabs();\\r\\nif (empty($formtabs))\\r\\n{\\r\\n    \\/\\/try to get formtabs and its fields from properties\\r\\n    $formtabs = $modx->fromJSON($properties[\'formtabs\']);\\r\\n}\\r\\n\\r\\nif ($jsonVarKey == \'migx_outputvalue\' && !empty($properties[\'jsonvarkey\']))\\r\\n{\\r\\n    $jsonVarKey = $properties[\'jsonvarkey\'];\\r\\n    $outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\r\\n}\\r\\n\\r\\n$outputvalue = $tv && empty($outputvalue) ? $tv->renderOutput($docid) : $outputvalue;\\r\\n\\/*\\r\\n*   get inputTvs \\r\\n*\\/\\r\\n$inputTvs = array();\\r\\nif (is_array($formtabs))\\r\\n{\\r\\n\\r\\n    \\/\\/multiple different Forms\\r\\n    \\/\\/ Note: use same field-names and inputTVs in all forms\\r\\n    $inputTvs = $migx->extractInputTvs($formtabs);\\r\\n}\\r\\n\\r\\nif ($tv)\\r\\n{\\r\\n    $migx->source = $tv->getSource($migx->working_context, false);\\r\\n}\\r\\n\\r\\n\\/\\/$task = $modx->migx->getTask();\\r\\n$filename = \'getlist.php\';\\r\\n$processorspath = $migx->config[\'processorsPath\'] . \'mgr\\/\';\\r\\n$filenames = array();\\r\\n$scriptProperties[\'start\'] = $modx->getOption(\'offset\', $scriptProperties, 0);\\r\\nif ($processor_file = $migx->findProcessor($processorspath, $filename, $filenames))\\r\\n{\\r\\n    include ($processor_file);\\r\\n    \\/\\/todo: add getlist-processor for default-MIGX-TV\\r\\n}\\r\\n\\r\\n$items = isset($rows) && is_array($rows) ? $rows : array();\\r\\n$modx->setPlaceholder($totalVar, isset($count) ? $count : 0);\\r\\n\\r\\n$properties = array();\\r\\nforeach ($scriptProperties as $property => $value)\\r\\n{\\r\\n    $properties[\'property.\' . $property] = $value;\\r\\n}\\r\\n\\r\\n$idx = 0;\\r\\n$output = array();\\r\\nforeach ($items as $key => $item)\\r\\n{\\r\\n\\r\\n    $fields = array();\\r\\n    foreach ($item as $field => $value)\\r\\n    {\\r\\n        $value = is_array($value) ? implode(\'||\', $value) : $value; \\/\\/handle arrays (checkboxes, multiselects)\\r\\n        if ($processTVs && isset($inputTvs[$field]))\\r\\n        {\\r\\n            if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inputTvs[$field][\'inputTV\'])))\\r\\n            {\\r\\n\\r\\n            } else\\r\\n            {\\r\\n                $tv = $modx->newObject(\'modTemplateVar\');\\r\\n                $tv->set(\'type\', $inputTvs[$field][\'inputTVtype\']);\\r\\n            }\\r\\n            $inputTV = $inputTvs[$field];\\r\\n\\r\\n            $mTypes = $modx->getOption(\'manipulatable_url_tv_output_types\', null, \'image,file\');\\r\\n            \\/\\/don\'t manipulate any urls here\\r\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', \'\');\\r\\n            $tv->set(\'default_text\', $value);\\r\\n            $value = $tv->renderOutput($docid);\\r\\n            \\/\\/set option back\\r\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', $mTypes);\\r\\n            \\/\\/now manipulate urls\\r\\n            if ($mediasource = $migx->getFieldSource($inputTV, $tv))\\r\\n            {\\r\\n                $mTypes = explode(\',\', $mTypes);\\r\\n                if (!empty($value) && in_array($tv->get(\'type\'), $mTypes))\\r\\n                {\\r\\n                    \\/\\/$value = $mediasource->prepareOutputUrl($value);\\r\\n                    $value = str_replace(\'\\/.\\/\', \'\\/\', $mediasource->prepareOutputUrl($value));\\r\\n                }\\r\\n            }\\r\\n\\r\\n        }\\r\\n        $fields[$field] = $value;\\r\\n\\r\\n    }\\r\\n    if ($toJsonPlaceholder)\\r\\n    {\\r\\n        $output[] = $fields;\\r\\n    } else\\r\\n    {\\r\\n        $fields[\'_alt\'] = $idx % 2;\\r\\n        $idx++;\\r\\n        $fields[\'_first\'] = $idx == 1 ? true : \'\';\\r\\n        $fields[\'_last\'] = $idx == $limit ? true : \'\';\\r\\n        $fields[\'idx\'] = $idx;\\r\\n        $rowtpl = $tpl;\\r\\n        \\/\\/get changing tpls from field\\r\\n        if (substr($tpl, 0, 7) == \\"@FIELD:\\")\\r\\n        {\\r\\n            $tplField = substr($tpl, 7);\\r\\n            $rowtpl = $fields[$tplField];\\r\\n        }\\r\\n\\r\\n        if (!isset($template[$rowtpl]))\\r\\n        {\\r\\n            if (substr($rowtpl, 0, 6) == \\"@FILE:\\")\\r\\n            {\\r\\n                $template[$rowtpl] = file_get_contents($modx->config[\'base_path\'] . substr($rowtpl, 6));\\r\\n            } elseif (substr($rowtpl, 0, 6) == \\"@CODE:\\")\\r\\n            {\\r\\n                $template[$rowtpl] = substr($tpl, 6);\\r\\n            } elseif ($chunk = $modx->getObject(\'modChunk\', array(\'name\' => $rowtpl), true))\\r\\n            {\\r\\n                $template[$rowtpl] = $chunk->getContent();\\r\\n            } else\\r\\n            {\\r\\n                $template[$rowtpl] = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        $fields = array_merge($fields, $properties);\\r\\n\\r\\n        if ($template[$rowtpl])\\r\\n        {\\r\\n            $chunk = $modx->newObject(\'modChunk\');\\r\\n            $chunk->setCacheable(false);\\r\\n            $chunk->setContent($template[$rowtpl]);\\r\\n            if (!empty($placeholdersKeyField) && isset($fields[$placeholdersKeyField]))\\r\\n            {\\r\\n                $output[$fields[$placeholdersKeyField]] = $chunk->process($fields);\\r\\n            } else\\r\\n            {\\r\\n                $output[] = $chunk->process($fields);\\r\\n            }\\r\\n        } else\\r\\n        {\\r\\n            if (!empty($placeholdersKeyField))\\r\\n            {\\r\\n                $output[$fields[$placeholdersKeyField]] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\r\\n            } else\\r\\n            {\\r\\n                $output[] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\nif ($toJsonPlaceholder)\\r\\n{\\r\\n    $modx->setPlaceholder($toJsonPlaceholder, $modx->toJson($output));\\r\\n    return \'\';\\r\\n}\\r\\n\\r\\nif (!empty($toSeparatePlaceholders))\\r\\n{\\r\\n    $modx->toPlaceholders($output, $toSeparatePlaceholders);\\r\\n    return \'\';\\r\\n}\\r\\n\\/*\\r\\nif (!empty($outerTpl))\\r\\n$o = parseTpl($outerTpl, array(\'output\'=>implode($outputSeparator, $output)));\\r\\nelse \\r\\n*\\/\\r\\nif (is_array($output))\\r\\n{\\r\\n    $o = implode($outputSeparator, $output);\\r\\n} else\\r\\n{\\r\\n    $o = $output;\\r\\n}\\r\\n\\r\\nif (!empty($toPlaceholder))\\r\\n{\\r\\n    $modx->setPlaceholder($toPlaceholder, $o);\\r\\n    return \'\';\\r\\n}\\r\\n\\r\\nreturn $o;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\r\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\r\\n$limit = $modx->getOption(\'limit\', $scriptProperties, \'0\');\\r\\n$offset = $modx->getOption(\'offset\', $scriptProperties, 0);\\r\\n$totalVar = $modx->getOption(\'totalVar\', $scriptProperties, \'total\');\\r\\n$randomize = $modx->getOption(\'randomize\', $scriptProperties, false);\\r\\n$preselectLimit = $modx->getOption(\'preselectLimit\', $scriptProperties, 0); \\/\\/ when random preselect important images\\r\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\r\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\r\\n$sortConfig = $modx->getOption(\'sortConfig\', $scriptProperties, \'\');\\r\\n$sortConfig = !empty($sortConfig) ? $modx->fromJSON($sortConfig) : array();\\r\\n$configs = $modx->getOption(\'configs\', $scriptProperties, \'\');\\r\\n$configs = !empty($configs) ? explode(\',\',$configs):array();\\r\\n$toSeparatePlaceholders = $modx->getOption(\'toSeparatePlaceholders\', $scriptProperties, false);\\r\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\r\\n$outputSeparator = $modx->getOption(\'outputSeparator\', $scriptProperties, \'\');\\r\\n\\/\\/$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'MIGX_id\');\\r\\n$placeholdersKeyField = $modx->getOption(\'placeholdersKeyField\', $scriptProperties, \'id\');\\r\\n$toJsonPlaceholder = $modx->getOption(\'toJsonPlaceholder\', $scriptProperties, false);\\r\\n$jsonVarKey = $modx->getOption(\'jsonVarKey\', $scriptProperties, \'migx_outputvalue\');\\r\\n$outputvalue = $modx->getOption(\'value\', $scriptProperties, \'\');\\r\\n$outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\r\\n$docidVarKey = $modx->getOption(\'docidVarKey\', $scriptProperties, \'migx_docid\');\\r\\n$docid = $modx->getOption(\'docid\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : 1));\\r\\n$docid = isset($_REQUEST[$docidVarKey]) ? $_REQUEST[$docidVarKey] : $docid;\\r\\n$processTVs = $modx->getOption(\'processTVs\', $scriptProperties, \'1\');\\r\\n\\r\\n$base_path = $modx->getOption(\'base_path\', null, MODX_BASE_PATH);\\r\\n$base_url = $modx->getOption(\'base_url\', null, MODX_BASE_URL);\\r\\n\\r\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\r\\nif (!($migx instanceof Migx))\\r\\n    return \'\';\\r\\n\\/\\/$modx->migx = &$migx;\\r\\n$defaultcontext = \'web\';\\r\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\r\\n\\r\\nif (!empty($tvname))\\r\\n{\\r\\n    if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname)))\\r\\n    {\\r\\n\\r\\n        \\/*\\r\\n        *   get inputProperties\\r\\n        *\\/\\r\\n\\r\\n\\r\\n        $properties = $tv->get(\'input_properties\');\\r\\n        $properties = isset($properties[\'configs\']) ? $properties : $tv->getProperties();\\r\\n        $cfgs = $modx->getOption(\'configs\',$properties,\'\');\\r\\n        if (!empty($cfgs)){\\r\\n            $cfgs = explode(\',\',$cfgs);\\r\\n            $configs = array_merge($configs,$cfgs);\\r\\n           \\r\\n        }\\r\\n        \\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\/\\/$migx->config[\'configs\'] = implode(\',\',$configs);\\r\\n$migx->loadConfigs(false,true,array(\'configs\'=>implode(\',\',$configs)));\\r\\n$migx->customconfigs = array_merge($migx->customconfigs,$scriptProperties);\\r\\n\\r\\n\\r\\n\\r\\n\\/\\/ get tabs from file or migx-config-table\\r\\n$formtabs = $migx->getTabs();\\r\\nif (empty($formtabs))\\r\\n{\\r\\n    \\/\\/try to get formtabs and its fields from properties\\r\\n    $formtabs = $modx->fromJSON($properties[\'formtabs\']);\\r\\n}\\r\\n\\r\\nif ($jsonVarKey == \'migx_outputvalue\' && !empty($properties[\'jsonvarkey\']))\\r\\n{\\r\\n    $jsonVarKey = $properties[\'jsonvarkey\'];\\r\\n    $outputvalue = isset($_REQUEST[$jsonVarKey]) ? $_REQUEST[$jsonVarKey] : $outputvalue;\\r\\n}\\r\\n\\r\\n$outputvalue = $tv && empty($outputvalue) ? $tv->renderOutput($docid) : $outputvalue;\\r\\n\\/*\\r\\n*   get inputTvs \\r\\n*\\/\\r\\n$inputTvs = array();\\r\\nif (is_array($formtabs))\\r\\n{\\r\\n\\r\\n    \\/\\/multiple different Forms\\r\\n    \\/\\/ Note: use same field-names and inputTVs in all forms\\r\\n    $inputTvs = $migx->extractInputTvs($formtabs);\\r\\n}\\r\\n\\r\\nif ($tv)\\r\\n{\\r\\n    $migx->source = $tv->getSource($migx->working_context, false);\\r\\n}\\r\\n\\r\\n\\/\\/$task = $modx->migx->getTask();\\r\\n$filename = \'getlist.php\';\\r\\n$processorspath = $migx->config[\'processorsPath\'] . \'mgr\\/\';\\r\\n$filenames = array();\\r\\n$scriptProperties[\'start\'] = $modx->getOption(\'offset\', $scriptProperties, 0);\\r\\nif ($processor_file = $migx->findProcessor($processorspath, $filename, $filenames))\\r\\n{\\r\\n    include ($processor_file);\\r\\n    \\/\\/todo: add getlist-processor for default-MIGX-TV\\r\\n}\\r\\n\\r\\n$items = isset($rows) && is_array($rows) ? $rows : array();\\r\\n$modx->setPlaceholder($totalVar, isset($count) ? $count : 0);\\r\\n\\r\\n$properties = array();\\r\\nforeach ($scriptProperties as $property => $value)\\r\\n{\\r\\n    $properties[\'property.\' . $property] = $value;\\r\\n}\\r\\n\\r\\n$idx = 0;\\r\\n$output = array();\\r\\nforeach ($items as $key => $item)\\r\\n{\\r\\n\\r\\n    $fields = array();\\r\\n    foreach ($item as $field => $value)\\r\\n    {\\r\\n        $value = is_array($value) ? implode(\'||\', $value) : $value; \\/\\/handle arrays (checkboxes, multiselects)\\r\\n        if ($processTVs && isset($inputTvs[$field]))\\r\\n        {\\r\\n            if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inputTvs[$field][\'inputTV\'])))\\r\\n            {\\r\\n\\r\\n            } else\\r\\n            {\\r\\n                $tv = $modx->newObject(\'modTemplateVar\');\\r\\n                $tv->set(\'type\', $inputTvs[$field][\'inputTVtype\']);\\r\\n            }\\r\\n            $inputTV = $inputTvs[$field];\\r\\n\\r\\n            $mTypes = $modx->getOption(\'manipulatable_url_tv_output_types\', null, \'image,file\');\\r\\n            \\/\\/don\'t manipulate any urls here\\r\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', \'\');\\r\\n            $tv->set(\'default_text\', $value);\\r\\n            $value = $tv->renderOutput($docid);\\r\\n            \\/\\/set option back\\r\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', $mTypes);\\r\\n            \\/\\/now manipulate urls\\r\\n            if ($mediasource = $migx->getFieldSource($inputTV, $tv))\\r\\n            {\\r\\n                $mTypes = explode(\',\', $mTypes);\\r\\n                if (!empty($value) && in_array($tv->get(\'type\'), $mTypes))\\r\\n                {\\r\\n                    \\/\\/$value = $mediasource->prepareOutputUrl($value);\\r\\n                    $value = str_replace(\'\\/.\\/\', \'\\/\', $mediasource->prepareOutputUrl($value));\\r\\n                }\\r\\n            }\\r\\n\\r\\n        }\\r\\n        $fields[$field] = $value;\\r\\n\\r\\n    }\\r\\n    if ($toJsonPlaceholder)\\r\\n    {\\r\\n        $output[] = $fields;\\r\\n    } else\\r\\n    {\\r\\n        $fields[\'_alt\'] = $idx % 2;\\r\\n        $idx++;\\r\\n        $fields[\'_first\'] = $idx == 1 ? true : \'\';\\r\\n        $fields[\'_last\'] = $idx == $limit ? true : \'\';\\r\\n        $fields[\'idx\'] = $idx;\\r\\n        $rowtpl = $tpl;\\r\\n        \\/\\/get changing tpls from field\\r\\n        if (substr($tpl, 0, 7) == \\"@FIELD:\\")\\r\\n        {\\r\\n            $tplField = substr($tpl, 7);\\r\\n            $rowtpl = $fields[$tplField];\\r\\n        }\\r\\n\\r\\n        if (!isset($template[$rowtpl]))\\r\\n        {\\r\\n            if (substr($rowtpl, 0, 6) == \\"@FILE:\\")\\r\\n            {\\r\\n                $template[$rowtpl] = file_get_contents($modx->config[\'base_path\'] . substr($rowtpl, 6));\\r\\n            } elseif (substr($rowtpl, 0, 6) == \\"@CODE:\\")\\r\\n            {\\r\\n                $template[$rowtpl] = substr($tpl, 6);\\r\\n            } elseif ($chunk = $modx->getObject(\'modChunk\', array(\'name\' => $rowtpl), true))\\r\\n            {\\r\\n                $template[$rowtpl] = $chunk->getContent();\\r\\n            } else\\r\\n            {\\r\\n                $template[$rowtpl] = false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        $fields = array_merge($fields, $properties);\\r\\n\\r\\n        if ($template[$rowtpl])\\r\\n        {\\r\\n            $chunk = $modx->newObject(\'modChunk\');\\r\\n            $chunk->setCacheable(false);\\r\\n            $chunk->setContent($template[$rowtpl]);\\r\\n            if (!empty($placeholdersKeyField) && isset($fields[$placeholdersKeyField]))\\r\\n            {\\r\\n                $output[$fields[$placeholdersKeyField]] = $chunk->process($fields);\\r\\n            } else\\r\\n            {\\r\\n                $output[] = $chunk->process($fields);\\r\\n            }\\r\\n        } else\\r\\n        {\\r\\n            if (!empty($placeholdersKeyField))\\r\\n            {\\r\\n                $output[$fields[$placeholdersKeyField]] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\r\\n            } else\\r\\n            {\\r\\n                $output[] = \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\nif ($toJsonPlaceholder)\\r\\n{\\r\\n    $modx->setPlaceholder($toJsonPlaceholder, $modx->toJson($output));\\r\\n    return \'\';\\r\\n}\\r\\n\\r\\nif (!empty($toSeparatePlaceholders))\\r\\n{\\r\\n    $modx->toPlaceholders($output, $toSeparatePlaceholders);\\r\\n    return \'\';\\r\\n}\\r\\n\\/*\\r\\nif (!empty($outerTpl))\\r\\n$o = parseTpl($outerTpl, array(\'output\'=>implode($outputSeparator, $output)));\\r\\nelse \\r\\n*\\/\\r\\nif (is_array($output))\\r\\n{\\r\\n    $o = implode($outputSeparator, $output);\\r\\n} else\\r\\n{\\r\\n    $o = $output;\\r\\n}\\r\\n\\r\\nif (!empty($toPlaceholder))\\r\\n{\\r\\n    $modx->setPlaceholder($toPlaceholder, $o);\\r\\n    return \'\';\\r\\n}\\r\\n\\r\\nreturn $o;"}',
        'guid' => '7500e02195165d3426289d1a5b4cf6e1',
        'native_key' => NULL,
        'signature' => '101ec37343df1357ff7a8d2a9455b0e6',
      ),
      'bba5489efa42ced48c20721a41decd45' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxLoopCollection","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/*\\r\\ngetXpdoInstanceAndAddPackage - properties\\r\\n\\r\\n$prefix\\r\\n$usecustomprefix\\r\\n$packageName\\r\\n\\r\\n\\r\\nprepareQuery - properties:\\r\\n\\r\\n$limit\\r\\n$offset\\r\\n$totalVar\\r\\n$where\\r\\n$queries\\r\\n$sortConfig\\r\\n$groupby\\r\\n$joins\\r\\n$selectfields\\r\\n$classname\\r\\n$debug\\r\\n\\r\\nrenderOutput - properties:\\r\\n\\r\\n$tpl\\r\\n$wrapperTpl\\r\\n$toSeparatePlaceholders\\r\\n$toPlaceholder\\r\\n$outputSeparator\\r\\n$placeholdersKeyField\\r\\n$toJsonPlaceholder\\r\\n$jsonVarKey\\r\\n$addfields\\r\\n\\r\\n*\\/\\r\\n\\r\\n\\r\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\r\\nif (!($migx instanceof Migx))\\r\\n    return \'\';\\r\\n\\/\\/$modx->migx = &$migx;\\r\\n\\r\\n$xpdo = $migx->getXpdoInstanceAndAddPackage($scriptProperties);\\r\\n\\r\\n$defaultcontext = \'web\';\\r\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\r\\n\\r\\n$c = $migx->prepareQuery($xpdo,$scriptProperties);\\r\\n$rows = $migx->getCollection($c);\\r\\n\\r\\n$output = $migx->renderOutput($rows,$scriptProperties);\\r\\n\\r\\nreturn $output;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/*\\r\\ngetXpdoInstanceAndAddPackage - properties\\r\\n\\r\\n$prefix\\r\\n$usecustomprefix\\r\\n$packageName\\r\\n\\r\\n\\r\\nprepareQuery - properties:\\r\\n\\r\\n$limit\\r\\n$offset\\r\\n$totalVar\\r\\n$where\\r\\n$queries\\r\\n$sortConfig\\r\\n$groupby\\r\\n$joins\\r\\n$selectfields\\r\\n$classname\\r\\n$debug\\r\\n\\r\\nrenderOutput - properties:\\r\\n\\r\\n$tpl\\r\\n$wrapperTpl\\r\\n$toSeparatePlaceholders\\r\\n$toPlaceholder\\r\\n$outputSeparator\\r\\n$placeholdersKeyField\\r\\n$toJsonPlaceholder\\r\\n$jsonVarKey\\r\\n$addfields\\r\\n\\r\\n*\\/\\r\\n\\r\\n\\r\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\r\\nif (!($migx instanceof Migx))\\r\\n    return \'\';\\r\\n\\/\\/$modx->migx = &$migx;\\r\\n\\r\\n$xpdo = $migx->getXpdoInstanceAndAddPackage($scriptProperties);\\r\\n\\r\\n$defaultcontext = \'web\';\\r\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\r\\n\\r\\n$c = $migx->prepareQuery($xpdo,$scriptProperties);\\r\\n$rows = $migx->getCollection($c);\\r\\n\\r\\n$output = $migx->renderOutput($rows,$scriptProperties);\\r\\n\\r\\nreturn $output;"}',
        'guid' => 'b98152b294616574937bfb1b395b27cd',
        'native_key' => NULL,
        'signature' => 'b6e0ae26581ad691f8d159750e7a8ed5',
      ),
      '0ba067071c4872e754522563d7c6c368' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxResourceMediaPath","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\r\\n * @name migxResourceMediaPath\\r\\n * @description Dynamically calculates the upload path for a given resource\\r\\n * \\r\\n * This Snippet is meant to dynamically calculate your baseBath attribute\\r\\n * for custom Media Sources.  This is useful if you wish to shepard uploaded\\r\\n * images to a folder dedicated to a given resource.  E.g. page 123 would \\r\\n * have its own images that page 456 could not reference.\\r\\n *\\r\\n * USAGE:\\r\\n * [[migxResourceMediaPath? &pathTpl=`assets\\/businesses\\/{id}\\/`]]\\r\\n * [[migxResourceMediaPath? &pathTpl=`assets\\/resourceimages\\/{id}\\/` &checkTVs=`mymigxtv`]]\\r\\n * [[migxResourceMediaPath? &pathTpl=`assets\\/test\\/{breadcrumb}`]]\\r\\n * [[migxResourceMediaPath? &pathTpl=`assets\\/test\\/{breadcrumb}` &breadcrumbdepth=`2`]]\\r\\n *\\r\\n * PARAMETERS\\r\\n * &pathTpl string formatting string specifying the file path. \\r\\n *\\t\\tRelative to MODX base_path\\r\\n *\\t\\tAvailable placeholders: {id}, {pagetitle}, {parent}\\r\\n * &docid (optional) integer page id\\r\\n * &createFolder (optional) boolean whether or not to create directory\\r\\n * &checkTVs (optional) commaseperated list of TVs to check, before directory is created \\r\\n *\\/\\r\\n$pathTpl = $modx->getOption(\'pathTpl\', $scriptProperties, \'\');\\r\\n$docid = $modx->getOption(\'docid\', $scriptProperties, \'\');\\r\\n$createfolder = $modx->getOption(\'createFolder\', $scriptProperties, false);\\r\\n$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\r\\n$checktvs = $modx->getOption(\'checkTVs\', $scriptProperties, false);\\r\\n\\r\\n$path = \'\';\\r\\n$fullpath = \'\';\\r\\n$createpath = false;\\r\\n$fallbackpath = $modx->getOption(\'fallbackPath\', $scriptProperties, \'assets\\/migxfallback\\/\');\\r\\n\\r\\nif (empty($pathTpl)) {\\r\\n    $modx->log(MODX_LOG_LEVEL_DEBUG, \'[migxResourceMediaPath]: pathTpl not specified.\');\\r\\n}\\r\\n\\r\\nif (empty($docid) && $modx->getPlaceholder(\'mediasource_docid\')) {\\r\\n    \\/\\/ placeholder was set by some script\\r\\n    \\/\\/ warning: the parser may not render placeholders, e.g. &docid=`[[*parent]]` may fail\\r\\n    $docid = $modx->getPlaceholder(\'mediasource_docid\');\\r\\n}\\r\\n\\r\\nif (empty($docid) && $modx->getPlaceholder(\'docid\')) {\\r\\n    \\/\\/ placeholder was set by some script\\r\\n    \\/\\/ warning: the parser may not render placeholders, e.g. &docid=`[[*parent]]` may fail\\r\\n    $docid = $modx->getPlaceholder(\'docid\');\\r\\n}\\r\\nif (empty($docid)) {\\r\\n\\r\\n    \\/\\/on frontend\\r\\n    if (is_object($modx->resource)) {\\r\\n        $docid = $modx->resource->get(\'id\');\\r\\n    }\\r\\n    \\/\\/on manager resource\\/update page\\r\\n    else {\\r\\n        $createpath = $createfolder;\\r\\n        \\/\\/ We do this to read the &id param from an Ajax request\\r\\n        $parsedUrl = parse_url($_SERVER[\'HTTP_REFERER\']);\\r\\n        parse_str($parsedUrl[\'query\'], $parsedQuery);\\r\\n\\r\\n        $action = $parsedQuery[\'a\'] ?? \'\';\\r\\n        if ($action == \'resource\\/update\'){\\r\\n            $docid = (int)$parsedQuery[\'amp;id\'] ?? (int)$parsedQuery[\'id\'] ?? 0;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nif (empty($docid)) {\\r\\n    $modx->log(MODX_LOG_LEVEL_DEBUG, \'[migxResourceMediaPath]: docid could not be determined.\');\\r\\n}\\r\\n\\r\\nif (empty($docid) || empty($pathTpl)) {\\r\\n    $path = $fallbackpath;\\r\\n    $fullpath = $modx->getOption(\'base_path\') . $fallbackpath;\\r\\n    $createpath = true;\\r\\n}\\r\\n\\r\\nif (empty($fullpath) && $resource = $modx->getObject(\'modResource\', $docid)) {\\r\\n    $path = $pathTpl;\\r\\n    $ultimateParent = \'\';\\r\\n    if (strstr($path, \'{breadcrumb}\') || strstr($path, \'{ultimateparent}\')) {\\r\\n        $depth = $modx->getOption(\'breadcrumbdepth\', $scriptProperties, 10);\\r\\n        $ctx = $resource->get(\'context_key\');\\r\\n        $parentids = $modx->getParentIds($docid, $depth, array(\'context\' => $ctx));\\r\\n        $breadcrumbdepth = $modx->getOption(\'breadcrumbdepth\', $scriptProperties, count($parentids));\\r\\n        $breadcrumbdepth = $breadcrumbdepth > count($parentids) ? count($parentids) : $breadcrumbdepth;\\r\\n        if (count($parentids) > 1) {\\r\\n            $parentids = array_reverse($parentids);\\r\\n            $parentids[] = $docid;\\r\\n            $ultimateParent = $parentids[1];\\r\\n        } else {\\r\\n            $ultimateParent = $docid;\\r\\n            $parentids = array();\\r\\n            $parentids[] = $docid;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (strstr($path, \'{breadcrumb}\')) {\\r\\n        $breadcrumbpath = \'\';\\r\\n        for ($i = 1; $i <= $breadcrumbdepth; $i++) {\\r\\n            $breadcrumbpath .= $parentids[$i] . \'\\/\';\\r\\n        }\\r\\n        $path = str_replace(\'{breadcrumb}\', $breadcrumbpath, $path);\\r\\n    }\\r\\n    \\r\\n    if (!empty($tvname)){\\r\\n        $path = str_replace(\'{tv_value}\', $resource->getTVValue($tvname), $path);    \\r\\n    }\\r\\n    $path = str_replace(\'{id}\', $docid, $path);\\r\\n    $path = str_replace(\'{pagetitle}\', $resource->get(\'pagetitle\'), $path);\\r\\n    $path = str_replace(\'{alias}\', $resource->get(\'alias\'), $path);\\r\\n    $path = str_replace(\'{parent}\', $resource->get(\'parent\'), $path);\\r\\n    $path = str_replace(\'{context_key}\', $resource->get(\'context_key\'), $path);\\r\\n    $path = str_replace(\'{ultimateparent}\', $ultimateParent, $path);\\r\\n    if ($template = $resource->getOne(\'Template\')) {\\r\\n        $path = str_replace(\'{templatename}\', $template->get(\'templatename\'), $path);\\r\\n    }\\r\\n    if ($user = $modx->user) {\\r\\n        $path = str_replace(\'{username}\', $modx->user->get(\'username\'), $path);\\r\\n        $path = str_replace(\'{userid}\', $modx->user->get(\'id\'), $path);\\r\\n    }\\r\\n\\r\\n    $fullpath = $modx->getOption(\'base_path\') . $path;\\r\\n\\r\\n    if ($createpath && $checktvs){\\r\\n        $createpath = false;\\r\\n        if ($template) {\\r\\n            $tvs = explode(\',\',$checktvs);\\r\\n            foreach ($tvs as $tv){\\r\\n                if ($template->hasTemplateVar($tv)){\\r\\n                    $createpath = true;\\r\\n                }\\r\\n            }            \\r\\n        } \\r\\n\\r\\n    }\\r\\n\\r\\n} else {\\r\\n    $modx->log(MODX_LOG_LEVEL_DEBUG, sprintf(\'[migxResourceMediaPath]: resource not found (page id %s).\', $docid));\\r\\n}\\r\\n\\r\\nif ($createpath && !file_exists($fullpath)) {\\r\\n\\r\\n    $permissions = octdec(\'0\' . (int)($modx->getOption(\'new_folder_permissions\', null, \'755\', true)));\\r\\n    if (!@mkdir($fullpath, $permissions, true)) {\\r\\n        $modx->log(MODX_LOG_LEVEL_DEBUG, sprintf(\'[migxResourceMediaPath]: could not create directory %s).\', $fullpath));\\r\\n    } else {\\r\\n        chmod($fullpath, $permissions);\\r\\n    }\\r\\n}\\r\\n\\r\\nreturn $path;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * @name migxResourceMediaPath\\r\\n * @description Dynamically calculates the upload path for a given resource\\r\\n * \\r\\n * This Snippet is meant to dynamically calculate your baseBath attribute\\r\\n * for custom Media Sources.  This is useful if you wish to shepard uploaded\\r\\n * images to a folder dedicated to a given resource.  E.g. page 123 would \\r\\n * have its own images that page 456 could not reference.\\r\\n *\\r\\n * USAGE:\\r\\n * [[migxResourceMediaPath? &pathTpl=`assets\\/businesses\\/{id}\\/`]]\\r\\n * [[migxResourceMediaPath? &pathTpl=`assets\\/resourceimages\\/{id}\\/` &checkTVs=`mymigxtv`]]\\r\\n * [[migxResourceMediaPath? &pathTpl=`assets\\/test\\/{breadcrumb}`]]\\r\\n * [[migxResourceMediaPath? &pathTpl=`assets\\/test\\/{breadcrumb}` &breadcrumbdepth=`2`]]\\r\\n *\\r\\n * PARAMETERS\\r\\n * &pathTpl string formatting string specifying the file path. \\r\\n *\\t\\tRelative to MODX base_path\\r\\n *\\t\\tAvailable placeholders: {id}, {pagetitle}, {parent}\\r\\n * &docid (optional) integer page id\\r\\n * &createFolder (optional) boolean whether or not to create directory\\r\\n * &checkTVs (optional) commaseperated list of TVs to check, before directory is created \\r\\n *\\/\\r\\n$pathTpl = $modx->getOption(\'pathTpl\', $scriptProperties, \'\');\\r\\n$docid = $modx->getOption(\'docid\', $scriptProperties, \'\');\\r\\n$createfolder = $modx->getOption(\'createFolder\', $scriptProperties, false);\\r\\n$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\r\\n$checktvs = $modx->getOption(\'checkTVs\', $scriptProperties, false);\\r\\n\\r\\n$path = \'\';\\r\\n$fullpath = \'\';\\r\\n$createpath = false;\\r\\n$fallbackpath = $modx->getOption(\'fallbackPath\', $scriptProperties, \'assets\\/migxfallback\\/\');\\r\\n\\r\\nif (empty($pathTpl)) {\\r\\n    $modx->log(MODX_LOG_LEVEL_DEBUG, \'[migxResourceMediaPath]: pathTpl not specified.\');\\r\\n}\\r\\n\\r\\nif (empty($docid) && $modx->getPlaceholder(\'mediasource_docid\')) {\\r\\n    \\/\\/ placeholder was set by some script\\r\\n    \\/\\/ warning: the parser may not render placeholders, e.g. &docid=`[[*parent]]` may fail\\r\\n    $docid = $modx->getPlaceholder(\'mediasource_docid\');\\r\\n}\\r\\n\\r\\nif (empty($docid) && $modx->getPlaceholder(\'docid\')) {\\r\\n    \\/\\/ placeholder was set by some script\\r\\n    \\/\\/ warning: the parser may not render placeholders, e.g. &docid=`[[*parent]]` may fail\\r\\n    $docid = $modx->getPlaceholder(\'docid\');\\r\\n}\\r\\nif (empty($docid)) {\\r\\n\\r\\n    \\/\\/on frontend\\r\\n    if (is_object($modx->resource)) {\\r\\n        $docid = $modx->resource->get(\'id\');\\r\\n    }\\r\\n    \\/\\/on manager resource\\/update page\\r\\n    else {\\r\\n        $createpath = $createfolder;\\r\\n        \\/\\/ We do this to read the &id param from an Ajax request\\r\\n        $parsedUrl = parse_url($_SERVER[\'HTTP_REFERER\']);\\r\\n        parse_str($parsedUrl[\'query\'], $parsedQuery);\\r\\n\\r\\n        $action = $parsedQuery[\'a\'] ?? \'\';\\r\\n        if ($action == \'resource\\/update\'){\\r\\n            $docid = (int)$parsedQuery[\'amp;id\'] ?? (int)$parsedQuery[\'id\'] ?? 0;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nif (empty($docid)) {\\r\\n    $modx->log(MODX_LOG_LEVEL_DEBUG, \'[migxResourceMediaPath]: docid could not be determined.\');\\r\\n}\\r\\n\\r\\nif (empty($docid) || empty($pathTpl)) {\\r\\n    $path = $fallbackpath;\\r\\n    $fullpath = $modx->getOption(\'base_path\') . $fallbackpath;\\r\\n    $createpath = true;\\r\\n}\\r\\n\\r\\nif (empty($fullpath) && $resource = $modx->getObject(\'modResource\', $docid)) {\\r\\n    $path = $pathTpl;\\r\\n    $ultimateParent = \'\';\\r\\n    if (strstr($path, \'{breadcrumb}\') || strstr($path, \'{ultimateparent}\')) {\\r\\n        $depth = $modx->getOption(\'breadcrumbdepth\', $scriptProperties, 10);\\r\\n        $ctx = $resource->get(\'context_key\');\\r\\n        $parentids = $modx->getParentIds($docid, $depth, array(\'context\' => $ctx));\\r\\n        $breadcrumbdepth = $modx->getOption(\'breadcrumbdepth\', $scriptProperties, count($parentids));\\r\\n        $breadcrumbdepth = $breadcrumbdepth > count($parentids) ? count($parentids) : $breadcrumbdepth;\\r\\n        if (count($parentids) > 1) {\\r\\n            $parentids = array_reverse($parentids);\\r\\n            $parentids[] = $docid;\\r\\n            $ultimateParent = $parentids[1];\\r\\n        } else {\\r\\n            $ultimateParent = $docid;\\r\\n            $parentids = array();\\r\\n            $parentids[] = $docid;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (strstr($path, \'{breadcrumb}\')) {\\r\\n        $breadcrumbpath = \'\';\\r\\n        for ($i = 1; $i <= $breadcrumbdepth; $i++) {\\r\\n            $breadcrumbpath .= $parentids[$i] . \'\\/\';\\r\\n        }\\r\\n        $path = str_replace(\'{breadcrumb}\', $breadcrumbpath, $path);\\r\\n    }\\r\\n    \\r\\n    if (!empty($tvname)){\\r\\n        $path = str_replace(\'{tv_value}\', $resource->getTVValue($tvname), $path);    \\r\\n    }\\r\\n    $path = str_replace(\'{id}\', $docid, $path);\\r\\n    $path = str_replace(\'{pagetitle}\', $resource->get(\'pagetitle\'), $path);\\r\\n    $path = str_replace(\'{alias}\', $resource->get(\'alias\'), $path);\\r\\n    $path = str_replace(\'{parent}\', $resource->get(\'parent\'), $path);\\r\\n    $path = str_replace(\'{context_key}\', $resource->get(\'context_key\'), $path);\\r\\n    $path = str_replace(\'{ultimateparent}\', $ultimateParent, $path);\\r\\n    if ($template = $resource->getOne(\'Template\')) {\\r\\n        $path = str_replace(\'{templatename}\', $template->get(\'templatename\'), $path);\\r\\n    }\\r\\n    if ($user = $modx->user) {\\r\\n        $path = str_replace(\'{username}\', $modx->user->get(\'username\'), $path);\\r\\n        $path = str_replace(\'{userid}\', $modx->user->get(\'id\'), $path);\\r\\n    }\\r\\n\\r\\n    $fullpath = $modx->getOption(\'base_path\') . $path;\\r\\n\\r\\n    if ($createpath && $checktvs){\\r\\n        $createpath = false;\\r\\n        if ($template) {\\r\\n            $tvs = explode(\',\',$checktvs);\\r\\n            foreach ($tvs as $tv){\\r\\n                if ($template->hasTemplateVar($tv)){\\r\\n                    $createpath = true;\\r\\n                }\\r\\n            }            \\r\\n        } \\r\\n\\r\\n    }\\r\\n\\r\\n} else {\\r\\n    $modx->log(MODX_LOG_LEVEL_DEBUG, sprintf(\'[migxResourceMediaPath]: resource not found (page id %s).\', $docid));\\r\\n}\\r\\n\\r\\nif ($createpath && !file_exists($fullpath)) {\\r\\n\\r\\n    $permissions = octdec(\'0\' . (int)($modx->getOption(\'new_folder_permissions\', null, \'755\', true)));\\r\\n    if (!@mkdir($fullpath, $permissions, true)) {\\r\\n        $modx->log(MODX_LOG_LEVEL_DEBUG, sprintf(\'[migxResourceMediaPath]: could not create directory %s).\', $fullpath));\\r\\n    } else {\\r\\n        chmod($fullpath, $permissions);\\r\\n    }\\r\\n}\\r\\n\\r\\nreturn $path;"}',
        'guid' => '296192934e87c5a5db710743d08616aa',
        'native_key' => NULL,
        'signature' => 'b23d765264c3b61defaf5f54fa87156f',
      ),
      'f625aed7c4f26f935aaad84b30388f2b' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxImageUpload","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"return include $modx->getOption(\'core_path\').\'components\\/migx\\/model\\/imageupload\\/imageupload.php\';","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"return include $modx->getOption(\'core_path\').\'components\\/migx\\/model\\/imageupload\\/imageupload.php\';"}',
        'guid' => '1e3f5c9f893ac89e6e08b989a6ba5014',
        'native_key' => NULL,
        'signature' => '74d416b4f584c50b8e15768aea56be15',
      ),
      '81cf79d9017958f1505a094831ce84f2' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxChunklistToJson","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$category = $modx->getOption(\'category\', $scriptProperties, \'\');\\r\\n$format = $modx->getOption(\'format\', $scriptProperties, \'json\');\\r\\n\\r\\n$classname = \'modChunk\';\\r\\n$rows = array();\\r\\n$output = \'\';\\r\\n\\r\\n$c = $modx->newQuery($classname);\\r\\n$c->select($modx->getSelectColumns($classname, $c->getAlias(), \'\', array(\'id\', \'name\')));\\r\\n$c->sortby(\'name\');\\r\\n\\r\\nif (!empty($category)) {\\r\\n    $c->where(array(\'category\' => $category));\\r\\n}\\r\\n\\/\\/$c->prepare();echo $c->toSql();\\r\\nif ($collection = $modx->getCollection($classname, $c)) {\\r\\n    $i = 0;\\r\\n\\r\\n    switch ($format) {\\r\\n        case \'json\':\\r\\n            foreach ($collection as $object) {\\r\\n                $row[\'MIGX_id\'] = (string )$i;\\r\\n                $row[\'name\'] = $object->get(\'name\');\\r\\n                $row[\'selected\'] = \'0\';\\r\\n                $rows[] = $row;\\r\\n                $i++;\\r\\n            }\\r\\n            $output = $modx->toJson($rows);\\r\\n            break;\\r\\n        \\r\\n        case \'optionlist\':\\r\\n            foreach ($collection as $object) {\\r\\n                $rows[] = $object->get(\'name\');\\r\\n                $i++;\\r\\n            }\\r\\n            $output = implode(\'||\',$rows);      \\r\\n        break;\\r\\n            \\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\nreturn $output;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"$category = $modx->getOption(\'category\', $scriptProperties, \'\');\\r\\n$format = $modx->getOption(\'format\', $scriptProperties, \'json\');\\r\\n\\r\\n$classname = \'modChunk\';\\r\\n$rows = array();\\r\\n$output = \'\';\\r\\n\\r\\n$c = $modx->newQuery($classname);\\r\\n$c->select($modx->getSelectColumns($classname, $c->getAlias(), \'\', array(\'id\', \'name\')));\\r\\n$c->sortby(\'name\');\\r\\n\\r\\nif (!empty($category)) {\\r\\n    $c->where(array(\'category\' => $category));\\r\\n}\\r\\n\\/\\/$c->prepare();echo $c->toSql();\\r\\nif ($collection = $modx->getCollection($classname, $c)) {\\r\\n    $i = 0;\\r\\n\\r\\n    switch ($format) {\\r\\n        case \'json\':\\r\\n            foreach ($collection as $object) {\\r\\n                $row[\'MIGX_id\'] = (string )$i;\\r\\n                $row[\'name\'] = $object->get(\'name\');\\r\\n                $row[\'selected\'] = \'0\';\\r\\n                $rows[] = $row;\\r\\n                $i++;\\r\\n            }\\r\\n            $output = $modx->toJson($rows);\\r\\n            break;\\r\\n        \\r\\n        case \'optionlist\':\\r\\n            foreach ($collection as $object) {\\r\\n                $rows[] = $object->get(\'name\');\\r\\n                $i++;\\r\\n            }\\r\\n            $output = implode(\'||\',$rows);      \\r\\n        break;\\r\\n            \\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\nreturn $output;"}',
        'guid' => '9d224897091e1c6d0ffe3dd5b69e2d0e',
        'native_key' => NULL,
        'signature' => '8d2f377adff454bf8751ea78bbe2da82',
      ),
      '0e1d274c03679b3a0665c2229fc2872e' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxSwitchDetailChunk","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/\\/[[migxSwitchDetailChunk? &detailChunk=`detailChunk` &listingChunk=`listingChunk`]]\\r\\n\\r\\n\\r\\n$properties[\'migx_id\'] = $modx->getOption(\'migx_id\',$_GET,\'\');\\r\\n\\r\\nif (!empty($properties[\'migx_id\'])){\\r\\n    $output = $modx->getChunk($detailChunk,$properties);\\r\\n}\\r\\nelse{\\r\\n    $output = $modx->getChunk($listingChunk);\\r\\n}\\r\\n\\r\\nreturn $output;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/\\/[[migxSwitchDetailChunk? &detailChunk=`detailChunk` &listingChunk=`listingChunk`]]\\r\\n\\r\\n\\r\\n$properties[\'migx_id\'] = $modx->getOption(\'migx_id\',$_GET,\'\');\\r\\n\\r\\nif (!empty($properties[\'migx_id\'])){\\r\\n    $output = $modx->getChunk($detailChunk,$properties);\\r\\n}\\r\\nelse{\\r\\n    $output = $modx->getChunk($listingChunk);\\r\\n}\\r\\n\\r\\nreturn $output;"}',
        'guid' => '8a94a689301af237f7d08927814a14ac',
        'native_key' => NULL,
        'signature' => '38eafd1670f364e6fb24bea93300a515',
      ),
      'b73e7be9fb8d1521689f668ff3e69cd2' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"getSwitchColumnCol","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$scriptProperties = $_REQUEST;\\r\\n$col = \'\';\\r\\n\\/\\/ special actions, for example the showSelector - action\\r\\n$tempParams = $modx->getOption(\'tempParams\', $scriptProperties, \'\');\\r\\n\\r\\nif (!empty($tempParams)) {\\r\\n    $tempParams = $modx->fromJson($tempParams);\\r\\n    $col = $modx->getOption(\'col\', $tempParams, \'\');\\r\\n}\\r\\n\\r\\nreturn $col;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"$scriptProperties = $_REQUEST;\\r\\n$col = \'\';\\r\\n\\/\\/ special actions, for example the showSelector - action\\r\\n$tempParams = $modx->getOption(\'tempParams\', $scriptProperties, \'\');\\r\\n\\r\\nif (!empty($tempParams)) {\\r\\n    $tempParams = $modx->fromJson($tempParams);\\r\\n    $col = $modx->getOption(\'col\', $tempParams, \'\');\\r\\n}\\r\\n\\r\\nreturn $col;"}',
        'guid' => '8aed0706be1d098dea95b4481eaed0a7',
        'native_key' => NULL,
        'signature' => 'b4048320e0950c0f21c0d7d169aa598d',
      ),
      '76c1a7efcc3a8ea0ca7b8ad57e4ded1e' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"getDayliMIGXrecord","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\r\\n * getDayliMIGXrecord\\r\\n *\\r\\n * Copyright 2009-2011 by Bruno Perner <b.perner@gmx.de>\\r\\n *\\r\\n * getDayliMIGXrecord is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * getDayliMIGXrecord is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * getDayliMIGXrecord; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package migx\\r\\n *\\/\\r\\n\\/**\\r\\n * getDayliMIGXrecord\\r\\n *\\r\\n * display Items from outputvalue of TV with custom-TV-input-type MIGX or from other JSON-string for MODx Revolution \\r\\n *\\r\\n * @version 1.0\\r\\n * @author Bruno Perner <b.perner@gmx.de>\\r\\n * @copyright Copyright &copy; 2012\\r\\n * @license http:\\/\\/www.gnu.org\\/licenses\\/old-licenses\\/gpl-2.0.html GNU General Public License\\r\\n * version 2 or (at your option) any later version.\\r\\n * @package migx\\r\\n *\\/\\r\\n\\r\\n\\/*example: [[!getDayliMIGXrecord? &tvname=`myTV`&tpl=`@CODE:<img src=\\"[[+image]]\\"\\/>` &randomize=`1`]]*\\/\\r\\n\\/* get default properties *\\/\\r\\n\\r\\n\\r\\n$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\r\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\r\\n$randomize = $modx->getOption(\'randomize\', $scriptProperties, false);\\r\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\r\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\r\\n$sort = $modx->getOption(\'sort\', $scriptProperties, \'\');\\r\\n$sort = !empty($sort) ? $modx->fromJSON($sort) : array();\\r\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\r\\n$docid = $modx->getOption(\'docid\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : 1));\\r\\n$processTVs = $modx->getOption(\'processTVs\', $scriptProperties, \'1\');\\r\\n\\r\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\r\\nif (!($migx instanceof Migx))\\r\\n    return \'\';\\r\\n$migx->working_context = $modx->resource->get(\'context_key\');\\r\\n\\r\\nif (!empty($tvname)) {\\r\\n    if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname))) {\\r\\n\\r\\n        \\/*\\r\\n        *   get inputProperties\\r\\n        *\\/\\r\\n\\r\\n\\r\\n        $properties = $tv->get(\'input_properties\');\\r\\n        $properties = isset($properties[\'formtabs\']) ? $properties : $tv->getProperties();\\r\\n\\r\\n        $migx->config[\'configs\'] = $properties[\'configs\'];\\r\\n        $migx->loadConfigs();\\r\\n        \\/\\/ get tabs from file or migx-config-table\\r\\n        $formtabs = $migx->getTabs();\\r\\n        if (empty($formtabs)) {\\r\\n            \\/\\/try to get formtabs and its fields from properties\\r\\n            $formtabs = $modx->fromJSON($properties[\'formtabs\']);\\r\\n        }\\r\\n\\r\\n        \\/\\/$tv->setCacheable(false);\\r\\n        \\/\\/$outputvalue = $tv->renderOutput($docid);\\r\\n        \\r\\n        $tvresource = $modx->getObject(\'modTemplateVarResource\', array(\\r\\n            \'tmplvarid\' => $tv->get(\'id\'),\\r\\n            \'contentid\' => $docid,\\r\\n            ));\\r\\n\\r\\n\\r\\n        $outputvalue = $tvresource->get(\'value\');\\r\\n        \\r\\n        \\/*\\r\\n        *   get inputTvs \\r\\n        *\\/\\r\\n        $inputTvs = array();\\r\\n        if (is_array($formtabs)) {\\r\\n\\r\\n            \\/\\/multiple different Forms\\r\\n            \\/\\/ Note: use same field-names and inputTVs in all forms\\r\\n            $inputTvs = $migx->extractInputTvs($formtabs);\\r\\n        }\\r\\n        $migx->source = $tv->getSource($migx->working_context, false);\\r\\n\\r\\n        if (empty($outputvalue)) {\\r\\n            return \'\';\\r\\n        }\\r\\n\\r\\n        $items = $modx->fromJSON($outputvalue);\\r\\n\\r\\n\\r\\n        \\/\\/is there an active item for the current date?\\r\\n        $activedate = $modx->getOption(\'activedate\', $scriptProperties, strftime(\'%Y\\/%m\\/%d\'));\\r\\n        \\/\\/$activedate = $modx->getOption(\'activedate\', $_GET, strftime(\'%Y\\/%m\\/%d\'));\\r\\n        $activewhere = array();\\r\\n        $activewhere[\'activedate\'] = $activedate;\\r\\n        $activewhere[\'activated\'] = \'1\';\\r\\n        $activeitems = $migx->filterItems($activewhere, $items);\\r\\n\\r\\n        if (count($activeitems) == 0) {\\r\\n\\r\\n            $activeitems = array();\\r\\n            \\/\\/ where filter\\r\\n            if (is_array($where) && count($where) > 0) {\\r\\n                $items = $migx->filterItems($where, $items);\\r\\n            }\\r\\n\\r\\n            $tempitems = array();\\r\\n            $count = count($items);\\r\\n            $emptycount = 0;\\r\\n            $latestdate = $activedate;\\r\\n            $nextdate = strtotime($latestdate);\\r\\n            foreach ($items as $item) {\\r\\n                \\/\\/empty all dates and active-states which are older than today\\r\\n                if (!empty($item[\'activedate\']) && $item[\'activedate\'] < $activedate) {\\r\\n                    $item[\'activated\'] = \'0\';\\r\\n                    $item[\'activedate\'] = \'\';\\r\\n                }\\r\\n                if (empty($item[\'activedate\'])) {\\r\\n                    $emptycount++;\\r\\n                }\\r\\n                if ($item[\'activedate\'] > $latestdate) {\\r\\n                    $latestdate = $item[\'activedate\'];\\r\\n                    $nextdate = strtotime($latestdate) + (24 * 60 * 60);\\r\\n                }\\r\\n                if ($item[\'activedate\'] == $activedate) {\\r\\n                    $item[\'activated\'] = \'1\';\\r\\n                    $activeitems[] = $item;\\r\\n                }\\r\\n                $tempitems[] = $item;\\r\\n            }\\r\\n\\r\\n            \\/\\/echo \'<pre>\' . print_r($tempitems, 1) . \'<\\/pre>\';\\r\\n\\r\\n            $items = $tempitems;\\r\\n\\r\\n\\r\\n            \\/\\/are there more than half of all items with empty activedates\\r\\n\\r\\n            if ($emptycount >= $count \\/ 2) {\\r\\n\\r\\n                \\/\\/ sort items\\r\\n                if (is_array($sort) && count($sort) > 0) {\\r\\n                    $items = $migx->sortDbResult($items, $sort);\\r\\n                }\\r\\n                if (count($items) > 0) {\\r\\n                    \\/\\/shuffle items\\r\\n                    if ($randomize) {\\r\\n                        shuffle($items);\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                $tempitems = array();\\r\\n                foreach ($items as $item) {\\r\\n                    if (empty($item[\'activedate\'])) {\\r\\n                        $item[\'activedate\'] = strftime(\'%Y\\/%m\\/%d\', $nextdate);\\r\\n                        $nextdate = $nextdate + (24 * 60 * 60);\\r\\n                        if ($item[\'activedate\'] == $activedate) {\\r\\n                            $item[\'activated\'] = \'1\';\\r\\n                            $activeitems[] = $item;\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    $tempitems[] = $item;\\r\\n                }\\r\\n\\r\\n                $items = $tempitems;\\r\\n            }\\r\\n\\r\\n            \\/\\/$resource = $modx->getObject(\'modResource\', $docid);\\r\\n            \\/\\/echo $modx->toJson($items);\\r\\n            $sort = \'[{\\"sortby\\":\\"activedate\\"}]\';\\r\\n            $items = $migx->sortDbResult($items, $modx->fromJson($sort));\\r\\n\\r\\n            \\/\\/echo \'<pre>\' . print_r($items, 1) . \'<\\/pre>\';\\r\\n\\r\\n            $tv->setValue($docid, $modx->toJson($items));\\r\\n            $tv->save();\\r\\n\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n$properties = array();\\r\\nforeach ($scriptProperties as $property => $value) {\\r\\n    $properties[\'property.\' . $property] = $value;\\r\\n}\\r\\n\\r\\n$output = \'\';\\r\\n\\r\\nforeach ($activeitems as $key => $item) {\\r\\n\\r\\n    $fields = array();\\r\\n    foreach ($item as $field => $value) {\\r\\n        $value = is_array($value) ? implode(\'||\', $value) : $value; \\/\\/handle arrays (checkboxes, multiselects)\\r\\n        if ($processTVs && isset($inputTvs[$field])) {\\r\\n            if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inputTvs[$field][\'inputTV\']))) {\\r\\n\\r\\n            } else {\\r\\n                $tv = $modx->newObject(\'modTemplateVar\');\\r\\n                $tv->set(\'type\', $inputTvs[$field][\'inputTVtype\']);\\r\\n            }\\r\\n            $inputTV = $inputTvs[$field];\\r\\n\\r\\n            $mTypes = $modx->getOption(\'manipulatable_url_tv_output_types\', null, \'image,file\');\\r\\n            \\/\\/don\'t manipulate any urls here\\r\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', \'\');\\r\\n            $tv->set(\'default_text\', $value);\\r\\n            $value = $tv->renderOutput($docid);\\r\\n            \\/\\/set option back\\r\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', $mTypes);\\r\\n            \\/\\/now manipulate urls\\r\\n            if ($mediasource = $migx->getFieldSource($inputTV, $tv)) {\\r\\n                $mTypes = explode(\',\', $mTypes);\\r\\n                if (!empty($value) && in_array($tv->get(\'type\'), $mTypes)) {\\r\\n                    \\/\\/$value = $mediasource->prepareOutputUrl($value);\\r\\n                    $value = str_replace(\'\\/.\\/\', \'\\/\', $mediasource->prepareOutputUrl($value));\\r\\n                }\\r\\n            }\\r\\n\\r\\n        }\\r\\n        $fields[$field] = $value;\\r\\n\\r\\n    }\\r\\n\\r\\n    $rowtpl = $tpl;\\r\\n    \\/\\/get changing tpls from field\\r\\n    if (substr($tpl, 0, 7) == \\"@FIELD:\\") {\\r\\n        $tplField = substr($tpl, 7);\\r\\n        $rowtpl = $fields[$tplField];\\r\\n    }\\r\\n\\r\\n    if (!isset($template[$rowtpl])) {\\r\\n        if (substr($rowtpl, 0, 6) == \\"@FILE:\\") {\\r\\n            $template[$rowtpl] = file_get_contents($modx->config[\'base_path\'] . substr($rowtpl, 6));\\r\\n        } elseif (substr($rowtpl, 0, 6) == \\"@CODE:\\") {\\r\\n            $template[$rowtpl] = substr($tpl, 6);\\r\\n        } elseif ($chunk = $modx->getObject(\'modChunk\', array(\'name\' => $rowtpl), true)) {\\r\\n            $template[$rowtpl] = $chunk->getContent();\\r\\n        } else {\\r\\n            $template[$rowtpl] = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    $fields = array_merge($fields, $properties);\\r\\n\\r\\n    if ($template[$rowtpl]) {\\r\\n        $chunk = $modx->newObject(\'modChunk\');\\r\\n        $chunk->setCacheable(false);\\r\\n        $chunk->setContent($template[$rowtpl]);\\r\\n        $output .= $chunk->process($fields);\\r\\n\\r\\n    } else {\\r\\n        $output .= \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\nif (!empty($toPlaceholder)) {\\r\\n    $modx->setPlaceholder($toPlaceholder, $output);\\r\\n    return \'\';\\r\\n}\\r\\n\\r\\nreturn $output;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * getDayliMIGXrecord\\r\\n *\\r\\n * Copyright 2009-2011 by Bruno Perner <b.perner@gmx.de>\\r\\n *\\r\\n * getDayliMIGXrecord is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * getDayliMIGXrecord is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * getDayliMIGXrecord; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package migx\\r\\n *\\/\\r\\n\\/**\\r\\n * getDayliMIGXrecord\\r\\n *\\r\\n * display Items from outputvalue of TV with custom-TV-input-type MIGX or from other JSON-string for MODx Revolution \\r\\n *\\r\\n * @version 1.0\\r\\n * @author Bruno Perner <b.perner@gmx.de>\\r\\n * @copyright Copyright &copy; 2012\\r\\n * @license http:\\/\\/www.gnu.org\\/licenses\\/old-licenses\\/gpl-2.0.html GNU General Public License\\r\\n * version 2 or (at your option) any later version.\\r\\n * @package migx\\r\\n *\\/\\r\\n\\r\\n\\/*example: [[!getDayliMIGXrecord? &tvname=`myTV`&tpl=`@CODE:<img src=\\"[[+image]]\\"\\/>` &randomize=`1`]]*\\/\\r\\n\\/* get default properties *\\/\\r\\n\\r\\n\\r\\n$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\r\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'\');\\r\\n$randomize = $modx->getOption(\'randomize\', $scriptProperties, false);\\r\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\r\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\r\\n$sort = $modx->getOption(\'sort\', $scriptProperties, \'\');\\r\\n$sort = !empty($sort) ? $modx->fromJSON($sort) : array();\\r\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\', $scriptProperties, false);\\r\\n$docid = $modx->getOption(\'docid\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : 1));\\r\\n$processTVs = $modx->getOption(\'processTVs\', $scriptProperties, \'1\');\\r\\n\\r\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\r\\nif (!($migx instanceof Migx))\\r\\n    return \'\';\\r\\n$migx->working_context = $modx->resource->get(\'context_key\');\\r\\n\\r\\nif (!empty($tvname)) {\\r\\n    if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname))) {\\r\\n\\r\\n        \\/*\\r\\n        *   get inputProperties\\r\\n        *\\/\\r\\n\\r\\n\\r\\n        $properties = $tv->get(\'input_properties\');\\r\\n        $properties = isset($properties[\'formtabs\']) ? $properties : $tv->getProperties();\\r\\n\\r\\n        $migx->config[\'configs\'] = $properties[\'configs\'];\\r\\n        $migx->loadConfigs();\\r\\n        \\/\\/ get tabs from file or migx-config-table\\r\\n        $formtabs = $migx->getTabs();\\r\\n        if (empty($formtabs)) {\\r\\n            \\/\\/try to get formtabs and its fields from properties\\r\\n            $formtabs = $modx->fromJSON($properties[\'formtabs\']);\\r\\n        }\\r\\n\\r\\n        \\/\\/$tv->setCacheable(false);\\r\\n        \\/\\/$outputvalue = $tv->renderOutput($docid);\\r\\n        \\r\\n        $tvresource = $modx->getObject(\'modTemplateVarResource\', array(\\r\\n            \'tmplvarid\' => $tv->get(\'id\'),\\r\\n            \'contentid\' => $docid,\\r\\n            ));\\r\\n\\r\\n\\r\\n        $outputvalue = $tvresource->get(\'value\');\\r\\n        \\r\\n        \\/*\\r\\n        *   get inputTvs \\r\\n        *\\/\\r\\n        $inputTvs = array();\\r\\n        if (is_array($formtabs)) {\\r\\n\\r\\n            \\/\\/multiple different Forms\\r\\n            \\/\\/ Note: use same field-names and inputTVs in all forms\\r\\n            $inputTvs = $migx->extractInputTvs($formtabs);\\r\\n        }\\r\\n        $migx->source = $tv->getSource($migx->working_context, false);\\r\\n\\r\\n        if (empty($outputvalue)) {\\r\\n            return \'\';\\r\\n        }\\r\\n\\r\\n        $items = $modx->fromJSON($outputvalue);\\r\\n\\r\\n\\r\\n        \\/\\/is there an active item for the current date?\\r\\n        $activedate = $modx->getOption(\'activedate\', $scriptProperties, strftime(\'%Y\\/%m\\/%d\'));\\r\\n        \\/\\/$activedate = $modx->getOption(\'activedate\', $_GET, strftime(\'%Y\\/%m\\/%d\'));\\r\\n        $activewhere = array();\\r\\n        $activewhere[\'activedate\'] = $activedate;\\r\\n        $activewhere[\'activated\'] = \'1\';\\r\\n        $activeitems = $migx->filterItems($activewhere, $items);\\r\\n\\r\\n        if (count($activeitems) == 0) {\\r\\n\\r\\n            $activeitems = array();\\r\\n            \\/\\/ where filter\\r\\n            if (is_array($where) && count($where) > 0) {\\r\\n                $items = $migx->filterItems($where, $items);\\r\\n            }\\r\\n\\r\\n            $tempitems = array();\\r\\n            $count = count($items);\\r\\n            $emptycount = 0;\\r\\n            $latestdate = $activedate;\\r\\n            $nextdate = strtotime($latestdate);\\r\\n            foreach ($items as $item) {\\r\\n                \\/\\/empty all dates and active-states which are older than today\\r\\n                if (!empty($item[\'activedate\']) && $item[\'activedate\'] < $activedate) {\\r\\n                    $item[\'activated\'] = \'0\';\\r\\n                    $item[\'activedate\'] = \'\';\\r\\n                }\\r\\n                if (empty($item[\'activedate\'])) {\\r\\n                    $emptycount++;\\r\\n                }\\r\\n                if ($item[\'activedate\'] > $latestdate) {\\r\\n                    $latestdate = $item[\'activedate\'];\\r\\n                    $nextdate = strtotime($latestdate) + (24 * 60 * 60);\\r\\n                }\\r\\n                if ($item[\'activedate\'] == $activedate) {\\r\\n                    $item[\'activated\'] = \'1\';\\r\\n                    $activeitems[] = $item;\\r\\n                }\\r\\n                $tempitems[] = $item;\\r\\n            }\\r\\n\\r\\n            \\/\\/echo \'<pre>\' . print_r($tempitems, 1) . \'<\\/pre>\';\\r\\n\\r\\n            $items = $tempitems;\\r\\n\\r\\n\\r\\n            \\/\\/are there more than half of all items with empty activedates\\r\\n\\r\\n            if ($emptycount >= $count \\/ 2) {\\r\\n\\r\\n                \\/\\/ sort items\\r\\n                if (is_array($sort) && count($sort) > 0) {\\r\\n                    $items = $migx->sortDbResult($items, $sort);\\r\\n                }\\r\\n                if (count($items) > 0) {\\r\\n                    \\/\\/shuffle items\\r\\n                    if ($randomize) {\\r\\n                        shuffle($items);\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                $tempitems = array();\\r\\n                foreach ($items as $item) {\\r\\n                    if (empty($item[\'activedate\'])) {\\r\\n                        $item[\'activedate\'] = strftime(\'%Y\\/%m\\/%d\', $nextdate);\\r\\n                        $nextdate = $nextdate + (24 * 60 * 60);\\r\\n                        if ($item[\'activedate\'] == $activedate) {\\r\\n                            $item[\'activated\'] = \'1\';\\r\\n                            $activeitems[] = $item;\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    $tempitems[] = $item;\\r\\n                }\\r\\n\\r\\n                $items = $tempitems;\\r\\n            }\\r\\n\\r\\n            \\/\\/$resource = $modx->getObject(\'modResource\', $docid);\\r\\n            \\/\\/echo $modx->toJson($items);\\r\\n            $sort = \'[{\\"sortby\\":\\"activedate\\"}]\';\\r\\n            $items = $migx->sortDbResult($items, $modx->fromJson($sort));\\r\\n\\r\\n            \\/\\/echo \'<pre>\' . print_r($items, 1) . \'<\\/pre>\';\\r\\n\\r\\n            $tv->setValue($docid, $modx->toJson($items));\\r\\n            $tv->save();\\r\\n\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n$properties = array();\\r\\nforeach ($scriptProperties as $property => $value) {\\r\\n    $properties[\'property.\' . $property] = $value;\\r\\n}\\r\\n\\r\\n$output = \'\';\\r\\n\\r\\nforeach ($activeitems as $key => $item) {\\r\\n\\r\\n    $fields = array();\\r\\n    foreach ($item as $field => $value) {\\r\\n        $value = is_array($value) ? implode(\'||\', $value) : $value; \\/\\/handle arrays (checkboxes, multiselects)\\r\\n        if ($processTVs && isset($inputTvs[$field])) {\\r\\n            if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $inputTvs[$field][\'inputTV\']))) {\\r\\n\\r\\n            } else {\\r\\n                $tv = $modx->newObject(\'modTemplateVar\');\\r\\n                $tv->set(\'type\', $inputTvs[$field][\'inputTVtype\']);\\r\\n            }\\r\\n            $inputTV = $inputTvs[$field];\\r\\n\\r\\n            $mTypes = $modx->getOption(\'manipulatable_url_tv_output_types\', null, \'image,file\');\\r\\n            \\/\\/don\'t manipulate any urls here\\r\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', \'\');\\r\\n            $tv->set(\'default_text\', $value);\\r\\n            $value = $tv->renderOutput($docid);\\r\\n            \\/\\/set option back\\r\\n            $modx->setOption(\'manipulatable_url_tv_output_types\', $mTypes);\\r\\n            \\/\\/now manipulate urls\\r\\n            if ($mediasource = $migx->getFieldSource($inputTV, $tv)) {\\r\\n                $mTypes = explode(\',\', $mTypes);\\r\\n                if (!empty($value) && in_array($tv->get(\'type\'), $mTypes)) {\\r\\n                    \\/\\/$value = $mediasource->prepareOutputUrl($value);\\r\\n                    $value = str_replace(\'\\/.\\/\', \'\\/\', $mediasource->prepareOutputUrl($value));\\r\\n                }\\r\\n            }\\r\\n\\r\\n        }\\r\\n        $fields[$field] = $value;\\r\\n\\r\\n    }\\r\\n\\r\\n    $rowtpl = $tpl;\\r\\n    \\/\\/get changing tpls from field\\r\\n    if (substr($tpl, 0, 7) == \\"@FIELD:\\") {\\r\\n        $tplField = substr($tpl, 7);\\r\\n        $rowtpl = $fields[$tplField];\\r\\n    }\\r\\n\\r\\n    if (!isset($template[$rowtpl])) {\\r\\n        if (substr($rowtpl, 0, 6) == \\"@FILE:\\") {\\r\\n            $template[$rowtpl] = file_get_contents($modx->config[\'base_path\'] . substr($rowtpl, 6));\\r\\n        } elseif (substr($rowtpl, 0, 6) == \\"@CODE:\\") {\\r\\n            $template[$rowtpl] = substr($tpl, 6);\\r\\n        } elseif ($chunk = $modx->getObject(\'modChunk\', array(\'name\' => $rowtpl), true)) {\\r\\n            $template[$rowtpl] = $chunk->getContent();\\r\\n        } else {\\r\\n            $template[$rowtpl] = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    $fields = array_merge($fields, $properties);\\r\\n\\r\\n    if ($template[$rowtpl]) {\\r\\n        $chunk = $modx->newObject(\'modChunk\');\\r\\n        $chunk->setCacheable(false);\\r\\n        $chunk->setContent($template[$rowtpl]);\\r\\n        $output .= $chunk->process($fields);\\r\\n\\r\\n    } else {\\r\\n        $output .= \'<pre>\' . print_r($fields, 1) . \'<\\/pre>\';\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\nif (!empty($toPlaceholder)) {\\r\\n    $modx->setPlaceholder($toPlaceholder, $output);\\r\\n    return \'\';\\r\\n}\\r\\n\\r\\nreturn $output;"}',
        'guid' => 'abc7a9f0499013f73fe9bf6fe6094157',
        'native_key' => NULL,
        'signature' => '85ffc14ca9b7ed6df667b3daf61d42be',
      ),
      '471ac631c50142d40fbb67b80747229b' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"filterbytag","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"if (!is_array($subject)) {\\r\\n    $subject = explode(\',\',str_replace(array(\'||\',\' \'),array(\',\',\'\'),$subject));\\r\\n}\\r\\n\\r\\nreturn (in_array($operand,$subject));","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"if (!is_array($subject)) {\\r\\n    $subject = explode(\',\',str_replace(array(\'||\',\' \'),array(\',\',\'\'),$subject));\\r\\n}\\r\\n\\r\\nreturn (in_array($operand,$subject));"}',
        'guid' => '1b71d0cbcd2ba5365ad69ad5ab087188',
        'native_key' => NULL,
        'signature' => '243742a0ebe9b85377871bdf9293aa0c',
      ),
      '7f55f01f92b666ef0e9965e810e147cb' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxObjectMediaPath","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$pathTpl = $modx->getOption(\'pathTpl\', $scriptProperties, \'\');\\r\\n$objectid = $modx->getOption(\'objectid\', $scriptProperties, \'\');\\r\\n$createfolder = $modx->getOption(\'createFolder\', $scriptProperties, \'1\');\\r\\n$path = \'\';\\r\\n$createpath = false;\\r\\nif (empty($objectid) && $modx->getPlaceholder(\'objectid\')) {\\r\\n    \\/\\/ placeholder was set by some script on frontend for example\\r\\n    $objectid = $modx->getPlaceholder(\'objectid\');\\r\\n}\\r\\nif (empty($objectid) && isset($_REQUEST[\'object_id\'])) {\\r\\n    $objectid = $_REQUEST[\'object_id\'];\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\nif (empty($objectid)) {\\r\\n\\r\\n    \\/\\/set Session - var in fields.php - processor\\r\\n    if (isset($_SESSION[\'migxWorkingObjectid\'])) {\\r\\n        $objectid = $_SESSION[\'migxWorkingObjectid\'];\\r\\n        $createpath = !empty($createfolder);\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n$path = str_replace(\'{id}\', $objectid, $pathTpl);\\r\\n\\r\\n$fullpath = $modx->getOption(\'base_path\') . $path;\\r\\n\\r\\nif ($createpath && !file_exists($fullpath)) {\\r\\n        $permissions = octdec(\'0\' . (int)($modx->getOption(\'new_folder_permissions\', null, \'755\', true)));\\r\\n        if (!@mkdir($fullpath, $permissions, true)) {\\r\\n            $modx->log(MODX_LOG_LEVEL_ERROR, sprintf(\'[migxResourceMediaPath]: could not create directory %s).\', $fullpath));\\r\\n        }\\r\\n        else{\\r\\n            chmod($fullpath, $permissions); \\r\\n        }\\r\\n}\\r\\n\\r\\nreturn $path;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"$pathTpl = $modx->getOption(\'pathTpl\', $scriptProperties, \'\');\\r\\n$objectid = $modx->getOption(\'objectid\', $scriptProperties, \'\');\\r\\n$createfolder = $modx->getOption(\'createFolder\', $scriptProperties, \'1\');\\r\\n$path = \'\';\\r\\n$createpath = false;\\r\\nif (empty($objectid) && $modx->getPlaceholder(\'objectid\')) {\\r\\n    \\/\\/ placeholder was set by some script on frontend for example\\r\\n    $objectid = $modx->getPlaceholder(\'objectid\');\\r\\n}\\r\\nif (empty($objectid) && isset($_REQUEST[\'object_id\'])) {\\r\\n    $objectid = $_REQUEST[\'object_id\'];\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\nif (empty($objectid)) {\\r\\n\\r\\n    \\/\\/set Session - var in fields.php - processor\\r\\n    if (isset($_SESSION[\'migxWorkingObjectid\'])) {\\r\\n        $objectid = $_SESSION[\'migxWorkingObjectid\'];\\r\\n        $createpath = !empty($createfolder);\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n$path = str_replace(\'{id}\', $objectid, $pathTpl);\\r\\n\\r\\n$fullpath = $modx->getOption(\'base_path\') . $path;\\r\\n\\r\\nif ($createpath && !file_exists($fullpath)) {\\r\\n        $permissions = octdec(\'0\' . (int)($modx->getOption(\'new_folder_permissions\', null, \'755\', true)));\\r\\n        if (!@mkdir($fullpath, $permissions, true)) {\\r\\n            $modx->log(MODX_LOG_LEVEL_ERROR, sprintf(\'[migxResourceMediaPath]: could not create directory %s).\', $fullpath));\\r\\n        }\\r\\n        else{\\r\\n            chmod($fullpath, $permissions); \\r\\n        }\\r\\n}\\r\\n\\r\\nreturn $path;"}',
        'guid' => 'fd5c2555fc30d1433e636c0941e1993a',
        'native_key' => NULL,
        'signature' => 'd8421afe271569f659d340dffe4b1592',
      ),
      'e5faf9c2a0db672f16254e6fd27967b9' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"exportMIGX2db","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\r\\n * exportMIGX2db\\r\\n *\\r\\n * Copyright 2014 by Bruno Perner <b.perner@gmx.de>\\r\\n * \\r\\n * Sponsored by Simon Wurster <info@wurster-medien.de>\\r\\n *\\r\\n * exportMIGX2db is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * exportMIGX2db is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * exportMIGX2db; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package migx\\r\\n *\\/\\r\\n\\/**\\r\\n * exportMIGX2db\\r\\n *\\r\\n * export Items from outputvalue of TV with custom-TV-input-type MIGX or from other JSON-string to db-table \\r\\n *\\r\\n * @version 1.0\\r\\n * @author Bruno Perner <b.perner@gmx.de>\\r\\n * @copyright Copyright &copy; 2014\\r\\n * @license http:\\/\\/www.gnu.org\\/licenses\\/old-licenses\\/gpl-2.0.html GNU General Public License\\r\\n * version 2 or (at your option) any later version.\\r\\n * @package migx\\r\\n *\\/\\r\\n\\r\\n\\/*\\r\\n[[!exportMIGX2db? \\r\\n&tvname=`references` \\r\\n&resources=`25` \\r\\n&packageName=`projekte`\\r\\n&classname=`Projekt` \\r\\n&migx_id_field=`migx_id` \\r\\n&renamed_fields=`{\\"Firmen-URL\\":\\"Firmen_url\\",\\"Projekt-URL\\":\\"Projekt_URL\\",\\"main-image\\":\\"main_image\\"}`\\r\\n]]\\r\\n*\\/\\r\\n\\r\\n\\r\\n$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\r\\n$resources = $modx->getOption(\'resources\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : \'\'));\\r\\n$resources = explode(\',\', $resources);\\r\\n$prefix = isset($scriptProperties[\'prefix\']) ? $scriptProperties[\'prefix\'] : null;\\r\\n$packageName = $modx->getOption(\'packageName\', $scriptProperties, \'\');\\r\\n$classname = $modx->getOption(\'classname\', $scriptProperties, \'\');\\r\\n$value = $modx->getOption(\'value\', $scriptProperties, \'\');\\r\\n$migx_id_field = $modx->getOption(\'migx_id_field\', $scriptProperties, \'\');\\r\\n$pos_field = $modx->getOption(\'pos_field\', $scriptProperties, \'\');\\r\\n$renamed_fields = $modx->getOption(\'renamed_fields\', $scriptProperties, \'\');\\r\\n\\r\\n$packagepath = $modx->getOption(\'core_path\') . \'components\\/\' . $packageName .\\r\\n    \'\\/\';\\r\\n$modelpath = $packagepath . \'model\\/\';\\r\\n\\r\\n$modx->addPackage($packageName, $modelpath, $prefix);\\r\\n$added = 0;\\r\\n$modified = 0;\\r\\n\\r\\nforeach ($resources as $docid) {\\r\\n    \\r\\n    $outputvalue = \'\';\\r\\n    if (count($resources)==1){\\r\\n        $outputvalue = $value;    \\r\\n    }\\r\\n    \\r\\n    if (!empty($tvname)) {\\r\\n        if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname))) {\\r\\n\\r\\n            $outputvalue = empty($outputvalue) ? $tv->renderOutput($docid) : $outputvalue;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (!empty($outputvalue)) {\\r\\n        $renamed = !empty($renamed_fields) ? $modx->fromJson($renamed_fields) : array();\\r\\n\\r\\n        $items = $modx->fromJSON($outputvalue);\\r\\n        $pos = 1;\\r\\n        $searchfields = array();\\r\\n        if (is_array($items)) {\\r\\n            foreach ($items as $fields) {\\r\\n                $search = array();\\r\\n                if (!empty($migx_id_field)) {\\r\\n                    $search[$migx_id_field] = $fields[\'MIGX_id\'];\\r\\n                }\\r\\n                if (!empty($resource_id_field)) {\\r\\n                    $search[$resource_id_field] = $docid;\\r\\n                }\\r\\n                if (!empty($migx_id_field) && $object = $modx->getObject($classname, $search)) {\\r\\n                    $mode = \'mod\';\\r\\n                } else {\\r\\n                    $object = $modx->newObject($classname);\\r\\n                    $object->fromArray($search);\\r\\n                    $mode = \'add\';\\r\\n                }\\r\\n                foreach ($fields as $field => $value) {\\r\\n                    $fieldname = array_key_exists($field, $renamed) ? $renamed[$field] : $field;\\r\\n                    $object->set($fieldname, $value);\\r\\n                }\\r\\n                if (!empty($pos_field)) {\\r\\n                    $object->set($pos_field,$pos) ;\\r\\n                }                \\r\\n                if ($object->save()) {\\r\\n                    if ($mode == \'add\') {\\r\\n                        $added++;\\r\\n                    } else {\\r\\n                        $modified++;\\r\\n                    }\\r\\n                }\\r\\n                $pos++;\\r\\n            }\\r\\n            \\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nreturn $added . \' rows added to db, \' . $modified . \' existing rows actualized\';","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * exportMIGX2db\\r\\n *\\r\\n * Copyright 2014 by Bruno Perner <b.perner@gmx.de>\\r\\n * \\r\\n * Sponsored by Simon Wurster <info@wurster-medien.de>\\r\\n *\\r\\n * exportMIGX2db is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * exportMIGX2db is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * exportMIGX2db; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package migx\\r\\n *\\/\\r\\n\\/**\\r\\n * exportMIGX2db\\r\\n *\\r\\n * export Items from outputvalue of TV with custom-TV-input-type MIGX or from other JSON-string to db-table \\r\\n *\\r\\n * @version 1.0\\r\\n * @author Bruno Perner <b.perner@gmx.de>\\r\\n * @copyright Copyright &copy; 2014\\r\\n * @license http:\\/\\/www.gnu.org\\/licenses\\/old-licenses\\/gpl-2.0.html GNU General Public License\\r\\n * version 2 or (at your option) any later version.\\r\\n * @package migx\\r\\n *\\/\\r\\n\\r\\n\\/*\\r\\n[[!exportMIGX2db? \\r\\n&tvname=`references` \\r\\n&resources=`25` \\r\\n&packageName=`projekte`\\r\\n&classname=`Projekt` \\r\\n&migx_id_field=`migx_id` \\r\\n&renamed_fields=`{\\"Firmen-URL\\":\\"Firmen_url\\",\\"Projekt-URL\\":\\"Projekt_URL\\",\\"main-image\\":\\"main_image\\"}`\\r\\n]]\\r\\n*\\/\\r\\n\\r\\n\\r\\n$tvname = $modx->getOption(\'tvname\', $scriptProperties, \'\');\\r\\n$resources = $modx->getOption(\'resources\', $scriptProperties, (isset($modx->resource) ? $modx->resource->get(\'id\') : \'\'));\\r\\n$resources = explode(\',\', $resources);\\r\\n$prefix = isset($scriptProperties[\'prefix\']) ? $scriptProperties[\'prefix\'] : null;\\r\\n$packageName = $modx->getOption(\'packageName\', $scriptProperties, \'\');\\r\\n$classname = $modx->getOption(\'classname\', $scriptProperties, \'\');\\r\\n$value = $modx->getOption(\'value\', $scriptProperties, \'\');\\r\\n$migx_id_field = $modx->getOption(\'migx_id_field\', $scriptProperties, \'\');\\r\\n$pos_field = $modx->getOption(\'pos_field\', $scriptProperties, \'\');\\r\\n$renamed_fields = $modx->getOption(\'renamed_fields\', $scriptProperties, \'\');\\r\\n\\r\\n$packagepath = $modx->getOption(\'core_path\') . \'components\\/\' . $packageName .\\r\\n    \'\\/\';\\r\\n$modelpath = $packagepath . \'model\\/\';\\r\\n\\r\\n$modx->addPackage($packageName, $modelpath, $prefix);\\r\\n$added = 0;\\r\\n$modified = 0;\\r\\n\\r\\nforeach ($resources as $docid) {\\r\\n    \\r\\n    $outputvalue = \'\';\\r\\n    if (count($resources)==1){\\r\\n        $outputvalue = $value;    \\r\\n    }\\r\\n    \\r\\n    if (!empty($tvname)) {\\r\\n        if ($tv = $modx->getObject(\'modTemplateVar\', array(\'name\' => $tvname))) {\\r\\n\\r\\n            $outputvalue = empty($outputvalue) ? $tv->renderOutput($docid) : $outputvalue;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (!empty($outputvalue)) {\\r\\n        $renamed = !empty($renamed_fields) ? $modx->fromJson($renamed_fields) : array();\\r\\n\\r\\n        $items = $modx->fromJSON($outputvalue);\\r\\n        $pos = 1;\\r\\n        $searchfields = array();\\r\\n        if (is_array($items)) {\\r\\n            foreach ($items as $fields) {\\r\\n                $search = array();\\r\\n                if (!empty($migx_id_field)) {\\r\\n                    $search[$migx_id_field] = $fields[\'MIGX_id\'];\\r\\n                }\\r\\n                if (!empty($resource_id_field)) {\\r\\n                    $search[$resource_id_field] = $docid;\\r\\n                }\\r\\n                if (!empty($migx_id_field) && $object = $modx->getObject($classname, $search)) {\\r\\n                    $mode = \'mod\';\\r\\n                } else {\\r\\n                    $object = $modx->newObject($classname);\\r\\n                    $object->fromArray($search);\\r\\n                    $mode = \'add\';\\r\\n                }\\r\\n                foreach ($fields as $field => $value) {\\r\\n                    $fieldname = array_key_exists($field, $renamed) ? $renamed[$field] : $field;\\r\\n                    $object->set($fieldname, $value);\\r\\n                }\\r\\n                if (!empty($pos_field)) {\\r\\n                    $object->set($pos_field,$pos) ;\\r\\n                }                \\r\\n                if ($object->save()) {\\r\\n                    if ($mode == \'add\') {\\r\\n                        $added++;\\r\\n                    } else {\\r\\n                        $modified++;\\r\\n                    }\\r\\n                }\\r\\n                $pos++;\\r\\n            }\\r\\n            \\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nreturn $added . \' rows added to db, \' . $modified . \' existing rows actualized\';"}',
        'guid' => '5e014a04adc84aff17b4108ad875c1f1',
        'native_key' => NULL,
        'signature' => '6a38e38de86f6f8130078bccf0e73d69',
      ),
      '0778304875fa8ebb5fff33702d1d4b22' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"preparedatewhere","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$name = $modx->getOption(\'name\', $scriptProperties, \'\');\\r\\n$date = $modx->getOption($name . \'_date\', $_REQUEST, \'\');\\r\\n$dir = str_replace(\'T\', \' \', $modx->getOption($name . \'_dir\', $_REQUEST, \'\'));\\r\\n\\r\\nif (!empty($date) && !empty($dir) && $dir != \'all\') {\\r\\n    switch ($dir) {\\r\\n        case \'=\':\\r\\n            $where = array(\\r\\n            \'enddate:>=\' => strftime(\'%Y-%m-%d 00:00:00\',strtotime($date)),\\r\\n            \'startdate:<=\' => strftime(\'%Y-%m-%d 23:59:59\',strtotime($date))\\r\\n            );\\r\\n            break;\\r\\n        case \'>=\':\\r\\n            $where = array(\\r\\n            \'enddate:>=\' => strftime(\'%Y-%m-%d 00:00:00\',strtotime($date))\\r\\n            );\\r\\n            break;\\r\\n        case \'<=\':\\r\\n            $where = array(\\r\\n            \'startdate:<=\' => strftime(\'%Y-%m-%d 23:59:59\',strtotime($date))\\r\\n            );            \\r\\n            break;\\r\\n\\r\\n    }\\r\\n\\r\\n    return $modx->toJson($where);\\r\\n}","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"$name = $modx->getOption(\'name\', $scriptProperties, \'\');\\r\\n$date = $modx->getOption($name . \'_date\', $_REQUEST, \'\');\\r\\n$dir = str_replace(\'T\', \' \', $modx->getOption($name . \'_dir\', $_REQUEST, \'\'));\\r\\n\\r\\nif (!empty($date) && !empty($dir) && $dir != \'all\') {\\r\\n    switch ($dir) {\\r\\n        case \'=\':\\r\\n            $where = array(\\r\\n            \'enddate:>=\' => strftime(\'%Y-%m-%d 00:00:00\',strtotime($date)),\\r\\n            \'startdate:<=\' => strftime(\'%Y-%m-%d 23:59:59\',strtotime($date))\\r\\n            );\\r\\n            break;\\r\\n        case \'>=\':\\r\\n            $where = array(\\r\\n            \'enddate:>=\' => strftime(\'%Y-%m-%d 00:00:00\',strtotime($date))\\r\\n            );\\r\\n            break;\\r\\n        case \'<=\':\\r\\n            $where = array(\\r\\n            \'startdate:<=\' => strftime(\'%Y-%m-%d 23:59:59\',strtotime($date))\\r\\n            );            \\r\\n            break;\\r\\n\\r\\n    }\\r\\n\\r\\n    return $modx->toJson($where);\\r\\n}"}',
        'guid' => 'cc87ac8be9cf2eb522ec42858f33e220',
        'native_key' => NULL,
        'signature' => 'f1e52a09f1660ad856b23085808234a8',
      ),
      'ba0d50bb7652ec864dfcca9cd03cd821' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxJsonToPlaceholders","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$value = $modx->getOption(\'value\',$scriptProperties,\'\');\\r\\n$prefix = $modx->getOption(\'prefix\',$scriptProperties,\'\');\\r\\n\\r\\n\\/\\/$modx->setPlaceholders($modx->fromJson($value),$prefix,\'\',true);\\r\\n\\r\\n$values = json_decode($value, true);\\r\\n\\r\\n$it = new RecursiveIteratorIterator(new RecursiveArrayIterator($values));\\r\\n\\r\\nif (is_array($values)){\\r\\n    foreach ($it as $key => $value){\\r\\n        $value = $value == null ? \'\' : $value;\\r\\n        $modx->setPlaceholder($prefix . $key, $value);\\r\\n    }\\r\\n}","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"$value = $modx->getOption(\'value\',$scriptProperties,\'\');\\r\\n$prefix = $modx->getOption(\'prefix\',$scriptProperties,\'\');\\r\\n\\r\\n\\/\\/$modx->setPlaceholders($modx->fromJson($value),$prefix,\'\',true);\\r\\n\\r\\n$values = json_decode($value, true);\\r\\n\\r\\n$it = new RecursiveIteratorIterator(new RecursiveArrayIterator($values));\\r\\n\\r\\nif (is_array($values)){\\r\\n    foreach ($it as $key => $value){\\r\\n        $value = $value == null ? \'\' : $value;\\r\\n        $modx->setPlaceholder($prefix . $key, $value);\\r\\n    }\\r\\n}"}',
        'guid' => 'f9f1c6452c9874f94c30c1b7674d11e6',
        'native_key' => NULL,
        'signature' => '5031832712c4df58bb35df4e5bfa555b',
      ),
      '3b95f315efc985b52acaf91e82de6758' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxGetCollectionTree","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\r\\n * migxGetCollectionTree\\r\\n *\\r\\n * Copyright 2014 by Bruno Perner <b.perner@gmx.de>\\r\\n *\\r\\n * migxGetCollectionTree is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * migxGetCollectionTree is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * migxGetCollectionTree; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package migx\\r\\n *\\/\\r\\n\\/**\\r\\n * migxGetCollectionTree\\r\\n *\\r\\n *          display nested items from different objects. The tree-schema is defined by a json-property. \\r\\n *\\r\\n * @version 1.0.0\\r\\n * @author Bruno Perner <b.perner@gmx.de>\\r\\n * @copyright Copyright &copy; 2014\\r\\n * @license http:\\/\\/www.gnu.org\\/licenses\\/old-licenses\\/gpl-2.0.html GNU General Public License\\r\\n * version 2 or (at your option) any later version.\\r\\n * @package migx\\r\\n *\\/\\r\\n\\r\\n$treeSchema = $modx->getOption(\'treeSchema\', $scriptProperties, \'\');\\r\\n$treeSchema = $modx->fromJson($treeSchema);\\r\\n\\r\\n$scriptProperties[\'current\'] = $modx->getOption(\'current\', $scriptProperties, \'\');\\r\\n$scriptProperties[\'currentClassname\'] = $modx->getOption(\'currentClassname\', $scriptProperties, \'\');\\r\\n$scriptProperties[\'currentKeyField\'] = $modx->getOption(\'currentKeyField\', $scriptProperties, \'id\');\\r\\n$return = $modx->getOption(\'return\', $scriptProperties, \'parsed\'); \\/\\/parsed,json,arrayprint\\r\\n\\r\\n\\/*\\r\\nExamples:\\r\\n\\r\\nGet Resource-Tree, 4 levels deep\\r\\n\\r\\n[[!migxGetCollectionTree?\\r\\n&current=`57`\\r\\n&currentClassname=`modResource`\\r\\n&treeSchema=`\\r\\n{\\r\\n\\"classname\\": \\"modResource\\",\\r\\n\\"debug\\": \\"1\\",\\r\\n\\"tpl\\": \\"mgctResourceTree\\",\\r\\n\\"wrapperTpl\\": \\"@CODE:<ul>[[+output]]<\\/ul>\\",\\r\\n\\"selectfields\\": \\"id,pagetitle\\",\\r\\n\\"where\\": {\\r\\n\\"parent\\": \\"0\\",\\r\\n\\"published\\": \\"1\\",\\r\\n\\"deleted\\": \\"0\\"\\r\\n},\\r\\n\\"_branches\\": [{\\r\\n\\"alias\\": \\"children\\",\\r\\n\\"classname\\": \\"modResource\\",\\r\\n\\"local\\": \\"parent\\",\\r\\n\\"foreign\\": \\"id\\",\\r\\n\\"tpl\\": \\"mgctResourceTree\\",\\r\\n\\"debug\\": \\"1\\",\\r\\n\\"selectfields\\": \\"id,pagetitle,parent\\",\\r\\n\\"_branches\\": [{\\r\\n\\"alias\\": \\"children\\",\\r\\n\\"classname\\": \\"modResource\\",\\r\\n\\"local\\": \\"parent\\",\\r\\n\\"foreign\\": \\"id\\",\\r\\n\\"tpl\\": \\"mgctResourceTree\\",\\r\\n\\"debug\\": \\"1\\",\\r\\n\\"selectfields\\": \\"id,pagetitle,parent\\",\\r\\n\\"where\\": {\\r\\n\\"published\\": \\"1\\",\\r\\n\\"deleted\\": \\"0\\"\\r\\n},\\r\\n\\"_branches\\": [{\\r\\n\\"alias\\": \\"children\\",\\r\\n\\"classname\\": \\"modResource\\",\\r\\n\\"local\\": \\"parent\\",\\r\\n\\"foreign\\": \\"id\\",\\r\\n\\"tpl\\": \\"mgctResourceTree\\",\\r\\n\\"debug\\": \\"1\\",\\r\\n\\"selectfields\\": \\"id,pagetitle,parent\\",\\r\\n\\"where\\": {\\r\\n\\"published\\": \\"1\\",\\r\\n\\"deleted\\": \\"0\\"\\r\\n}\\r\\n}]\\r\\n}]\\r\\n}]\\r\\n}\\r\\n`]]\\r\\n\\r\\nthe chunk mgctResourceTree:\\r\\n<li class=\\"[[+_activelabel]] [[+_currentlabel]]\\" ><a href=\\"[[~[[+id]]]]\\">[[+pagetitle]]([[+id]])<\\/a><\\/li>\\r\\n[[+innercounts.children:gt=`0`:then=`\\r\\n<ul>[[+innerrows.children]]<\\/ul>\\r\\n`:else=``]]\\r\\n\\r\\nget all Templates and its Resources:\\r\\n\\r\\n[[!migxGetCollectionTree?\\r\\n&treeSchema=`\\r\\n{\\r\\n\\"classname\\": \\"modTemplate\\",\\r\\n\\"debug\\": \\"1\\",\\r\\n\\"tpl\\": \\"@CODE:<h3>[[+templatename]]<\\/h3><ul>[[+innerrows.resource]]<\\/ul>\\",\\r\\n\\"selectfields\\": \\"id,templatename\\",\\r\\n\\"_branches\\": [{\\r\\n\\"alias\\": \\"resource\\",\\r\\n\\"classname\\": \\"modResource\\",\\r\\n\\"local\\": \\"template\\",\\r\\n\\"foreign\\": \\"id\\",\\r\\n\\"tpl\\": \\"@CODE:<li>[[+pagetitle]]([[+id]])<\\/li>\\",\\r\\n\\"debug\\": \\"1\\",\\r\\n\\"selectfields\\": \\"id,pagetitle,template\\"\\r\\n}]\\r\\n}\\r\\n`]]\\r\\n*\\/\\r\\n\\r\\nif (!class_exists(\'MigxGetCollectionTree\')) {\\r\\n    class MigxGetCollectionTree\\r\\n    {\\r\\n        function __construct(modX & $modx, array $config = array())\\r\\n        {\\r\\n            $this->modx = &$modx;\\r\\n            $this->config = $config;\\r\\n        }\\r\\n\\r\\n        function getBranch($branch, $foreigns = array(), $level = 1)\\r\\n        {\\r\\n\\r\\n            $rows = array();\\r\\n\\r\\n            if (count($foreigns) > 0) {\\r\\n                $modx = &$this->modx;\\r\\n\\r\\n                $local = $modx->getOption(\'local\', $branch, \'\');\\r\\n                $where = $modx->getOption(\'where\', $branch, array());\\r\\n                $where = !empty($where) && !is_array($where) ? $modx->fromJSON($where) : $where;\\r\\n                $where[] = array($local . \':IN\' => $foreigns);\\r\\n\\r\\n                $branch[\'where\'] = $modx->toJson($where);\\r\\n\\r\\n                $level++;\\r\\n                \\/*\\r\\n                if ($levelFromCurrent > 0){\\r\\n                $levelFromCurrent++;    \\r\\n                }\\r\\n                *\\/\\r\\n\\r\\n                $rows = $this->getRows($branch, $level);\\r\\n            }\\r\\n\\r\\n            return $rows;\\r\\n        }\\r\\n\\r\\n        function getRows($scriptProperties, $level)\\r\\n        {\\r\\n            $migx = &$this->migx;\\r\\n            $modx = &$this->modx;\\r\\n\\r\\n            $current = $modx->getOption(\'current\', $this->config, \'\');\\r\\n            $currentKeyField = $modx->getOption(\'currentKeyField\', $this->config, \'id\');\\r\\n            $currentlabel = $modx->getOption(\'currentlabel\', $this->config, \'current\');\\r\\n            $classname = $modx->getOption(\'classname\', $scriptProperties, \'\');\\r\\n\\t\\t\\t$sortResult = $modx->getOption(\'sortResult\', $scriptProperties, \'\');\\r\\n            $currentClassname = !empty($this->config[\'currentClassname\']) ? $this->config[\'currentClassname\'] : $classname;\\r\\n\\r\\n            $activelabel = $modx->getOption(\'activelabel\', $this->config, \'active\');\\r\\n            $return = $modx->getOption(\'return\', $this->config, \'parsed\');\\r\\n\\r\\n            $xpdo = $migx->getXpdoInstanceAndAddPackage($scriptProperties);\\r\\n            $c = $migx->prepareQuery($xpdo, $scriptProperties);\\r\\n            $rows = $migx->getCollection($c);\\r\\n\\r\\n            $branches = $modx->getOption(\'_branches\', $scriptProperties, array());\\r\\n\\r\\n            $collectedSubrows = array();\\r\\n            foreach ($branches as $branch) {\\r\\n                $foreign = $modx->getOption(\'foreign\', $branch, \'\');\\r\\n                $local = $modx->getOption(\'local\', $branch, \'\');\\r\\n                $alias = $modx->getOption(\'alias\', $branch, \'\');\\r\\n                \\/\\/$activeonly = $modx->getOption(\'activeonly\', $branch, \'\');\\r\\n                $foreigns = array();\\r\\n                foreach ($rows as $row) {\\r\\n                    $foreigns[] = $row[$foreign];\\r\\n                }\\r\\n\\r\\n                $subrows = $this->getBranch($branch, $foreigns, $level);\\r\\n                foreach ($subrows as $subrow) {\\r\\n\\r\\n                    $collectedSubrows[$subrow[$local]][] = $subrow;\\r\\n                    $subrow[\'_active\'] = $modx->getOption(\'_active\', $subrow, \'0\');\\r\\n                    \\/*\\r\\n                    if (!empty($activeonly) && $subrow[\'_active\'] != \'1\') {\\r\\n                    $output = \'\';\\r\\n                    } else {\\r\\n                    $collectedSubrows[$subrow[$local]][] = $subrow;\\r\\n                    }\\r\\n                    *\\/\\r\\n                    if ($subrow[\'_active\'] == \'1\') {\\r\\n                        \\/\\/echo \'active subrow:<pre>\' . print_r($subrow,1) . \'<\\/pre>\';\\r\\n                        $activesubrow[$subrow[$local]] = true;\\r\\n                    }\\r\\n                    if ($subrow[\'_current\'] == \'1\') {\\r\\n                        \\/\\/echo \'active subrow:<pre>\' . print_r($subrow,1) . \'<\\/pre>\';\\r\\n                        $currentsubrow[$subrow[$local]] = true;\\r\\n                    }\\r\\n\\r\\n\\r\\n                }\\r\\n                \\/\\/insert subrows\\r\\n                $temprows = $rows;\\r\\n                $rows = array();\\r\\n                foreach ($temprows as $row) {\\r\\n                    if (isset($collectedSubrows[$row[$foreign]])) {\\r\\n                        $row[\'_active\'] = \'0\';\\r\\n                        $row[\'_currentparent\'] = \'0\';\\r\\n                        if (isset($activesubrow[$row[$foreign]]) && $activesubrow[$row[$foreign]]) {\\r\\n                            $row[\'_active\'] = \'1\';\\r\\n                            \\/\\/echo \'active row:<pre>\' . print_r($row,1) . \'<\\/pre>\';\\r\\n                        }\\r\\n                        if (isset($currentsubrow[$row[$foreign]]) && $currentsubrow[$row[$foreign]]) {\\r\\n                            $row[\'_currentparent\'] = \'1\';\\r\\n                            \\/\\/echo \'active row:<pre>\' . print_r($row,1) . \'<\\/pre>\';\\r\\n                        }\\r\\n\\r\\n                        \\/\\/render innerrows\\r\\n                        \\/\\/$output = $migx->renderOutput($collectedSubrows[$row[$foreign]],$scriptProperties);\\r\\n                        \\/\\/$output = $collectedSubrows[$row[$foreign]];\\r\\n\\r\\n                        $row[\'innercounts.\' . $alias] = count($collectedSubrows[$row[$foreign]]);\\r\\n                        $row[\'_scriptProperties\'][$alias] = $branch;\\r\\n                        \\/*\\r\\n                        switch ($return) {\\r\\n                        case \'parsed\':\\r\\n                        $output = $migx->renderOutput($collectedSubrows[$row[$foreign]], $branch);\\r\\n                        \\/\\/$subbranches = $modx->getOption(\'_branches\', $branch, array());\\r\\n                        \\/\\/if there are any placeholders left with the same alias from subbranch, remove them\\r\\n                        $output = str_replace(\'[[+innerrows.\' . $alias . \']]\', \'\', $output);\\r\\n                        break;\\r\\n                        case \'json\':\\r\\n                        case \'arrayprint\':\\r\\n                        $output = $collectedSubrows[$row[$foreign]];\\r\\n                        break;\\r\\n                        }\\r\\n                        *\\/\\r\\n                        $output = $collectedSubrows[$row[$foreign]];\\r\\n\\r\\n                        $row[\'innerrows.\' . $alias] = $output;\\r\\n\\r\\n                    }\\r\\n                    $rows[] = $row;\\r\\n                }\\r\\n\\r\\n            }\\r\\n\\r\\n            $temprows = $rows;\\r\\n            $rows = array();\\r\\n            foreach ($temprows as $row) {\\r\\n                \\/\\/add additional placeholders\\r\\n                $row[\'_level\'] = $level;\\r\\n                $row[\'_active\'] = $modx->getOption(\'_active\', $row, \'0\');\\r\\n                if ($currentClassname == $classname && $row[$currentKeyField] == $current) {\\r\\n                    $row[\'_current\'] = \'1\';\\r\\n                    $row[\'_currentlabel\'] = $currentlabel;\\r\\n                    $row[\'_active\'] = \'1\';\\r\\n                } else {\\r\\n                    $row[\'_current\'] = \'0\';\\r\\n                    $row[\'_currentlabel\'] = \'\';\\r\\n                }\\r\\n                if ($row[\'_active\'] == \'1\') {\\r\\n                    $row[\'_activelabel\'] = $activelabel;\\r\\n                } else {\\r\\n                    $row[\'_activelabel\'] = \'\';\\r\\n                }\\r\\n                $rows[] = $row;\\r\\n            }\\r\\n\\r\\n            if (!empty($sortResult) && is_array($sortResult)){\\r\\n                $rows = $migx->sortDbResult($rows, $sortResult);\\r\\n\\t\\t\\t}\\r\\n\\r\\n            return $rows;\\r\\n        }\\r\\n\\r\\n        function renderRow($row, $levelFromCurrent = 0)\\r\\n        {\\r\\n            $migx = &$this->migx;\\r\\n            $modx = &$this->modx;\\r\\n            $return = $modx->getOption(\'return\', $this->config, \'parsed\');\\r\\n            $branchProperties = $modx->getOption(\'_scriptProperties\', $row, array());\\r\\n            $current = $modx->getOption(\'_current\', $row, \'0\');\\r\\n            $currentparent = $modx->getOption(\'_currentparent\', $row, \'0\');\\r\\n            $levelFromCurrent = $current == \'1\' ? 1 : $levelFromCurrent;\\r\\n            $row[\'_levelFromCurrent\'] = $levelFromCurrent;\\r\\n            foreach ($branchProperties as $alias => $properties) {\\r\\n                $innerrows = $modx->getOption(\'innerrows.\' . $alias, $row, array());\\r\\n                $subrows = $this->renderRows($innerrows, $properties, $levelFromCurrent, $currentparent);\\r\\n                if ($return == \'parsed\') {\\r\\n                    $subrows = $migx->renderOutput($subrows, $properties);\\r\\n                }\\r\\n                $row[\'innerrows.\' . $alias] = $subrows;\\r\\n            }\\r\\n\\r\\n            return $row;\\r\\n        }\\r\\n\\r\\n        function renderRows($rows, $scriptProperties, $levelFromCurrent = 0, $siblingOfCurrent = \'0\')\\r\\n        {\\r\\n\\r\\n            $modx = &$this->modx;\\r\\n            $temprows = $rows;\\r\\n            $rows = array();\\r\\n            if ($levelFromCurrent > 0) {\\r\\n                $levelFromCurrent++;\\r\\n            }\\r\\n            foreach ($temprows as $row) {\\r\\n                $row[\'_siblingOfCurrent\'] = $siblingOfCurrent;\\r\\n                $row = $this->renderRow($row, $levelFromCurrent);\\r\\n                $rows[] = $row;\\r\\n            }\\r\\n            return $rows;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n$instance = new MigxGetCollectionTree($modx, $scriptProperties);\\r\\n\\r\\nif (is_array($treeSchema)) {\\r\\n    $scriptProperties = $treeSchema;\\r\\n\\r\\n    $migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\r\\n    if (!($migx instanceof Migx))\\r\\n        return \'\';\\r\\n\\r\\n    $defaultcontext = \'web\';\\r\\n    $migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\r\\n    $instance->migx = &$migx;\\r\\n\\r\\n    $level = 1;\\r\\n    $scriptProperties[\'alias\'] = \'row\';\\r\\n    $rows = $instance->getRows($scriptProperties, $level);\\r\\n\\r\\n    $row = array();\\r\\n    $row[\'innercounts.row\'] = count($rows);\\r\\n    $row[\'innerrows.row\'] = $rows;\\r\\n    $row[\'_scriptProperties\'][\'row\'] = $scriptProperties;\\r\\n\\r\\n    $rows = $instance->renderRow($row);\\r\\n\\r\\n    $output = \'\';\\r\\n    switch ($return) {\\r\\n        case \'parsed\':\\r\\n            $output = $modx->getOption(\'innerrows.row\', $rows, \'\');\\r\\n            break;\\r\\n        case \'json\':\\r\\n            $output = $modx->toJson($rows);\\r\\n            break;\\r\\n        case \'arrayprint\':\\r\\n            $output = \'<pre>\' . print_r($rows, 1) . \'<\\/pre>\';\\r\\n            break;\\r\\n    }\\r\\n\\r\\n    return $output;\\r\\n\\r\\n}","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * migxGetCollectionTree\\r\\n *\\r\\n * Copyright 2014 by Bruno Perner <b.perner@gmx.de>\\r\\n *\\r\\n * migxGetCollectionTree is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * migxGetCollectionTree is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * migxGetCollectionTree; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package migx\\r\\n *\\/\\r\\n\\/**\\r\\n * migxGetCollectionTree\\r\\n *\\r\\n *          display nested items from different objects. The tree-schema is defined by a json-property. \\r\\n *\\r\\n * @version 1.0.0\\r\\n * @author Bruno Perner <b.perner@gmx.de>\\r\\n * @copyright Copyright &copy; 2014\\r\\n * @license http:\\/\\/www.gnu.org\\/licenses\\/old-licenses\\/gpl-2.0.html GNU General Public License\\r\\n * version 2 or (at your option) any later version.\\r\\n * @package migx\\r\\n *\\/\\r\\n\\r\\n$treeSchema = $modx->getOption(\'treeSchema\', $scriptProperties, \'\');\\r\\n$treeSchema = $modx->fromJson($treeSchema);\\r\\n\\r\\n$scriptProperties[\'current\'] = $modx->getOption(\'current\', $scriptProperties, \'\');\\r\\n$scriptProperties[\'currentClassname\'] = $modx->getOption(\'currentClassname\', $scriptProperties, \'\');\\r\\n$scriptProperties[\'currentKeyField\'] = $modx->getOption(\'currentKeyField\', $scriptProperties, \'id\');\\r\\n$return = $modx->getOption(\'return\', $scriptProperties, \'parsed\'); \\/\\/parsed,json,arrayprint\\r\\n\\r\\n\\/*\\r\\nExamples:\\r\\n\\r\\nGet Resource-Tree, 4 levels deep\\r\\n\\r\\n[[!migxGetCollectionTree?\\r\\n&current=`57`\\r\\n&currentClassname=`modResource`\\r\\n&treeSchema=`\\r\\n{\\r\\n\\"classname\\": \\"modResource\\",\\r\\n\\"debug\\": \\"1\\",\\r\\n\\"tpl\\": \\"mgctResourceTree\\",\\r\\n\\"wrapperTpl\\": \\"@CODE:<ul>[[+output]]<\\/ul>\\",\\r\\n\\"selectfields\\": \\"id,pagetitle\\",\\r\\n\\"where\\": {\\r\\n\\"parent\\": \\"0\\",\\r\\n\\"published\\": \\"1\\",\\r\\n\\"deleted\\": \\"0\\"\\r\\n},\\r\\n\\"_branches\\": [{\\r\\n\\"alias\\": \\"children\\",\\r\\n\\"classname\\": \\"modResource\\",\\r\\n\\"local\\": \\"parent\\",\\r\\n\\"foreign\\": \\"id\\",\\r\\n\\"tpl\\": \\"mgctResourceTree\\",\\r\\n\\"debug\\": \\"1\\",\\r\\n\\"selectfields\\": \\"id,pagetitle,parent\\",\\r\\n\\"_branches\\": [{\\r\\n\\"alias\\": \\"children\\",\\r\\n\\"classname\\": \\"modResource\\",\\r\\n\\"local\\": \\"parent\\",\\r\\n\\"foreign\\": \\"id\\",\\r\\n\\"tpl\\": \\"mgctResourceTree\\",\\r\\n\\"debug\\": \\"1\\",\\r\\n\\"selectfields\\": \\"id,pagetitle,parent\\",\\r\\n\\"where\\": {\\r\\n\\"published\\": \\"1\\",\\r\\n\\"deleted\\": \\"0\\"\\r\\n},\\r\\n\\"_branches\\": [{\\r\\n\\"alias\\": \\"children\\",\\r\\n\\"classname\\": \\"modResource\\",\\r\\n\\"local\\": \\"parent\\",\\r\\n\\"foreign\\": \\"id\\",\\r\\n\\"tpl\\": \\"mgctResourceTree\\",\\r\\n\\"debug\\": \\"1\\",\\r\\n\\"selectfields\\": \\"id,pagetitle,parent\\",\\r\\n\\"where\\": {\\r\\n\\"published\\": \\"1\\",\\r\\n\\"deleted\\": \\"0\\"\\r\\n}\\r\\n}]\\r\\n}]\\r\\n}]\\r\\n}\\r\\n`]]\\r\\n\\r\\nthe chunk mgctResourceTree:\\r\\n<li class=\\"[[+_activelabel]] [[+_currentlabel]]\\" ><a href=\\"[[~[[+id]]]]\\">[[+pagetitle]]([[+id]])<\\/a><\\/li>\\r\\n[[+innercounts.children:gt=`0`:then=`\\r\\n<ul>[[+innerrows.children]]<\\/ul>\\r\\n`:else=``]]\\r\\n\\r\\nget all Templates and its Resources:\\r\\n\\r\\n[[!migxGetCollectionTree?\\r\\n&treeSchema=`\\r\\n{\\r\\n\\"classname\\": \\"modTemplate\\",\\r\\n\\"debug\\": \\"1\\",\\r\\n\\"tpl\\": \\"@CODE:<h3>[[+templatename]]<\\/h3><ul>[[+innerrows.resource]]<\\/ul>\\",\\r\\n\\"selectfields\\": \\"id,templatename\\",\\r\\n\\"_branches\\": [{\\r\\n\\"alias\\": \\"resource\\",\\r\\n\\"classname\\": \\"modResource\\",\\r\\n\\"local\\": \\"template\\",\\r\\n\\"foreign\\": \\"id\\",\\r\\n\\"tpl\\": \\"@CODE:<li>[[+pagetitle]]([[+id]])<\\/li>\\",\\r\\n\\"debug\\": \\"1\\",\\r\\n\\"selectfields\\": \\"id,pagetitle,template\\"\\r\\n}]\\r\\n}\\r\\n`]]\\r\\n*\\/\\r\\n\\r\\nif (!class_exists(\'MigxGetCollectionTree\')) {\\r\\n    class MigxGetCollectionTree\\r\\n    {\\r\\n        function __construct(modX & $modx, array $config = array())\\r\\n        {\\r\\n            $this->modx = &$modx;\\r\\n            $this->config = $config;\\r\\n        }\\r\\n\\r\\n        function getBranch($branch, $foreigns = array(), $level = 1)\\r\\n        {\\r\\n\\r\\n            $rows = array();\\r\\n\\r\\n            if (count($foreigns) > 0) {\\r\\n                $modx = &$this->modx;\\r\\n\\r\\n                $local = $modx->getOption(\'local\', $branch, \'\');\\r\\n                $where = $modx->getOption(\'where\', $branch, array());\\r\\n                $where = !empty($where) && !is_array($where) ? $modx->fromJSON($where) : $where;\\r\\n                $where[] = array($local . \':IN\' => $foreigns);\\r\\n\\r\\n                $branch[\'where\'] = $modx->toJson($where);\\r\\n\\r\\n                $level++;\\r\\n                \\/*\\r\\n                if ($levelFromCurrent > 0){\\r\\n                $levelFromCurrent++;    \\r\\n                }\\r\\n                *\\/\\r\\n\\r\\n                $rows = $this->getRows($branch, $level);\\r\\n            }\\r\\n\\r\\n            return $rows;\\r\\n        }\\r\\n\\r\\n        function getRows($scriptProperties, $level)\\r\\n        {\\r\\n            $migx = &$this->migx;\\r\\n            $modx = &$this->modx;\\r\\n\\r\\n            $current = $modx->getOption(\'current\', $this->config, \'\');\\r\\n            $currentKeyField = $modx->getOption(\'currentKeyField\', $this->config, \'id\');\\r\\n            $currentlabel = $modx->getOption(\'currentlabel\', $this->config, \'current\');\\r\\n            $classname = $modx->getOption(\'classname\', $scriptProperties, \'\');\\r\\n\\t\\t\\t$sortResult = $modx->getOption(\'sortResult\', $scriptProperties, \'\');\\r\\n            $currentClassname = !empty($this->config[\'currentClassname\']) ? $this->config[\'currentClassname\'] : $classname;\\r\\n\\r\\n            $activelabel = $modx->getOption(\'activelabel\', $this->config, \'active\');\\r\\n            $return = $modx->getOption(\'return\', $this->config, \'parsed\');\\r\\n\\r\\n            $xpdo = $migx->getXpdoInstanceAndAddPackage($scriptProperties);\\r\\n            $c = $migx->prepareQuery($xpdo, $scriptProperties);\\r\\n            $rows = $migx->getCollection($c);\\r\\n\\r\\n            $branches = $modx->getOption(\'_branches\', $scriptProperties, array());\\r\\n\\r\\n            $collectedSubrows = array();\\r\\n            foreach ($branches as $branch) {\\r\\n                $foreign = $modx->getOption(\'foreign\', $branch, \'\');\\r\\n                $local = $modx->getOption(\'local\', $branch, \'\');\\r\\n                $alias = $modx->getOption(\'alias\', $branch, \'\');\\r\\n                \\/\\/$activeonly = $modx->getOption(\'activeonly\', $branch, \'\');\\r\\n                $foreigns = array();\\r\\n                foreach ($rows as $row) {\\r\\n                    $foreigns[] = $row[$foreign];\\r\\n                }\\r\\n\\r\\n                $subrows = $this->getBranch($branch, $foreigns, $level);\\r\\n                foreach ($subrows as $subrow) {\\r\\n\\r\\n                    $collectedSubrows[$subrow[$local]][] = $subrow;\\r\\n                    $subrow[\'_active\'] = $modx->getOption(\'_active\', $subrow, \'0\');\\r\\n                    \\/*\\r\\n                    if (!empty($activeonly) && $subrow[\'_active\'] != \'1\') {\\r\\n                    $output = \'\';\\r\\n                    } else {\\r\\n                    $collectedSubrows[$subrow[$local]][] = $subrow;\\r\\n                    }\\r\\n                    *\\/\\r\\n                    if ($subrow[\'_active\'] == \'1\') {\\r\\n                        \\/\\/echo \'active subrow:<pre>\' . print_r($subrow,1) . \'<\\/pre>\';\\r\\n                        $activesubrow[$subrow[$local]] = true;\\r\\n                    }\\r\\n                    if ($subrow[\'_current\'] == \'1\') {\\r\\n                        \\/\\/echo \'active subrow:<pre>\' . print_r($subrow,1) . \'<\\/pre>\';\\r\\n                        $currentsubrow[$subrow[$local]] = true;\\r\\n                    }\\r\\n\\r\\n\\r\\n                }\\r\\n                \\/\\/insert subrows\\r\\n                $temprows = $rows;\\r\\n                $rows = array();\\r\\n                foreach ($temprows as $row) {\\r\\n                    if (isset($collectedSubrows[$row[$foreign]])) {\\r\\n                        $row[\'_active\'] = \'0\';\\r\\n                        $row[\'_currentparent\'] = \'0\';\\r\\n                        if (isset($activesubrow[$row[$foreign]]) && $activesubrow[$row[$foreign]]) {\\r\\n                            $row[\'_active\'] = \'1\';\\r\\n                            \\/\\/echo \'active row:<pre>\' . print_r($row,1) . \'<\\/pre>\';\\r\\n                        }\\r\\n                        if (isset($currentsubrow[$row[$foreign]]) && $currentsubrow[$row[$foreign]]) {\\r\\n                            $row[\'_currentparent\'] = \'1\';\\r\\n                            \\/\\/echo \'active row:<pre>\' . print_r($row,1) . \'<\\/pre>\';\\r\\n                        }\\r\\n\\r\\n                        \\/\\/render innerrows\\r\\n                        \\/\\/$output = $migx->renderOutput($collectedSubrows[$row[$foreign]],$scriptProperties);\\r\\n                        \\/\\/$output = $collectedSubrows[$row[$foreign]];\\r\\n\\r\\n                        $row[\'innercounts.\' . $alias] = count($collectedSubrows[$row[$foreign]]);\\r\\n                        $row[\'_scriptProperties\'][$alias] = $branch;\\r\\n                        \\/*\\r\\n                        switch ($return) {\\r\\n                        case \'parsed\':\\r\\n                        $output = $migx->renderOutput($collectedSubrows[$row[$foreign]], $branch);\\r\\n                        \\/\\/$subbranches = $modx->getOption(\'_branches\', $branch, array());\\r\\n                        \\/\\/if there are any placeholders left with the same alias from subbranch, remove them\\r\\n                        $output = str_replace(\'[[+innerrows.\' . $alias . \']]\', \'\', $output);\\r\\n                        break;\\r\\n                        case \'json\':\\r\\n                        case \'arrayprint\':\\r\\n                        $output = $collectedSubrows[$row[$foreign]];\\r\\n                        break;\\r\\n                        }\\r\\n                        *\\/\\r\\n                        $output = $collectedSubrows[$row[$foreign]];\\r\\n\\r\\n                        $row[\'innerrows.\' . $alias] = $output;\\r\\n\\r\\n                    }\\r\\n                    $rows[] = $row;\\r\\n                }\\r\\n\\r\\n            }\\r\\n\\r\\n            $temprows = $rows;\\r\\n            $rows = array();\\r\\n            foreach ($temprows as $row) {\\r\\n                \\/\\/add additional placeholders\\r\\n                $row[\'_level\'] = $level;\\r\\n                $row[\'_active\'] = $modx->getOption(\'_active\', $row, \'0\');\\r\\n                if ($currentClassname == $classname && $row[$currentKeyField] == $current) {\\r\\n                    $row[\'_current\'] = \'1\';\\r\\n                    $row[\'_currentlabel\'] = $currentlabel;\\r\\n                    $row[\'_active\'] = \'1\';\\r\\n                } else {\\r\\n                    $row[\'_current\'] = \'0\';\\r\\n                    $row[\'_currentlabel\'] = \'\';\\r\\n                }\\r\\n                if ($row[\'_active\'] == \'1\') {\\r\\n                    $row[\'_activelabel\'] = $activelabel;\\r\\n                } else {\\r\\n                    $row[\'_activelabel\'] = \'\';\\r\\n                }\\r\\n                $rows[] = $row;\\r\\n            }\\r\\n\\r\\n            if (!empty($sortResult) && is_array($sortResult)){\\r\\n                $rows = $migx->sortDbResult($rows, $sortResult);\\r\\n\\t\\t\\t}\\r\\n\\r\\n            return $rows;\\r\\n        }\\r\\n\\r\\n        function renderRow($row, $levelFromCurrent = 0)\\r\\n        {\\r\\n            $migx = &$this->migx;\\r\\n            $modx = &$this->modx;\\r\\n            $return = $modx->getOption(\'return\', $this->config, \'parsed\');\\r\\n            $branchProperties = $modx->getOption(\'_scriptProperties\', $row, array());\\r\\n            $current = $modx->getOption(\'_current\', $row, \'0\');\\r\\n            $currentparent = $modx->getOption(\'_currentparent\', $row, \'0\');\\r\\n            $levelFromCurrent = $current == \'1\' ? 1 : $levelFromCurrent;\\r\\n            $row[\'_levelFromCurrent\'] = $levelFromCurrent;\\r\\n            foreach ($branchProperties as $alias => $properties) {\\r\\n                $innerrows = $modx->getOption(\'innerrows.\' . $alias, $row, array());\\r\\n                $subrows = $this->renderRows($innerrows, $properties, $levelFromCurrent, $currentparent);\\r\\n                if ($return == \'parsed\') {\\r\\n                    $subrows = $migx->renderOutput($subrows, $properties);\\r\\n                }\\r\\n                $row[\'innerrows.\' . $alias] = $subrows;\\r\\n            }\\r\\n\\r\\n            return $row;\\r\\n        }\\r\\n\\r\\n        function renderRows($rows, $scriptProperties, $levelFromCurrent = 0, $siblingOfCurrent = \'0\')\\r\\n        {\\r\\n\\r\\n            $modx = &$this->modx;\\r\\n            $temprows = $rows;\\r\\n            $rows = array();\\r\\n            if ($levelFromCurrent > 0) {\\r\\n                $levelFromCurrent++;\\r\\n            }\\r\\n            foreach ($temprows as $row) {\\r\\n                $row[\'_siblingOfCurrent\'] = $siblingOfCurrent;\\r\\n                $row = $this->renderRow($row, $levelFromCurrent);\\r\\n                $rows[] = $row;\\r\\n            }\\r\\n            return $rows;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n$instance = new MigxGetCollectionTree($modx, $scriptProperties);\\r\\n\\r\\nif (is_array($treeSchema)) {\\r\\n    $scriptProperties = $treeSchema;\\r\\n\\r\\n    $migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\r\\n    if (!($migx instanceof Migx))\\r\\n        return \'\';\\r\\n\\r\\n    $defaultcontext = \'web\';\\r\\n    $migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\r\\n    $instance->migx = &$migx;\\r\\n\\r\\n    $level = 1;\\r\\n    $scriptProperties[\'alias\'] = \'row\';\\r\\n    $rows = $instance->getRows($scriptProperties, $level);\\r\\n\\r\\n    $row = array();\\r\\n    $row[\'innercounts.row\'] = count($rows);\\r\\n    $row[\'innerrows.row\'] = $rows;\\r\\n    $row[\'_scriptProperties\'][\'row\'] = $scriptProperties;\\r\\n\\r\\n    $rows = $instance->renderRow($row);\\r\\n\\r\\n    $output = \'\';\\r\\n    switch ($return) {\\r\\n        case \'parsed\':\\r\\n            $output = $modx->getOption(\'innerrows.row\', $rows, \'\');\\r\\n            break;\\r\\n        case \'json\':\\r\\n            $output = $modx->toJson($rows);\\r\\n            break;\\r\\n        case \'arrayprint\':\\r\\n            $output = \'<pre>\' . print_r($rows, 1) . \'<\\/pre>\';\\r\\n            break;\\r\\n    }\\r\\n\\r\\n    return $output;\\r\\n\\r\\n}"}',
        'guid' => '57b8c4b75cc0edc1d09be13c1ad97008',
        'native_key' => NULL,
        'signature' => '870d1a2966b1838e14592f6e97f2e10c',
      ),
      'b6444757f0430a1cdd8d214fa1332a03' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxIsNewObject","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"if (isset($_REQUEST[\'object_id\']) && $_REQUEST[\'object_id\']==\'new\'){\\r\\n    return 1;\\r\\n}","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"if (isset($_REQUEST[\'object_id\']) && $_REQUEST[\'object_id\']==\'new\'){\\r\\n    return 1;\\r\\n}"}',
        'guid' => 'e1a8e3f3fc18fdde95c5e49736990be2',
        'native_key' => NULL,
        'signature' => 'fa7f891d6692bb5def9e7aead230ec6f',
      ),
      '0b36df333609770b32fcacac27b2bd10' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migx_example_validate","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$properties = &$modx->getOption(\'scriptProperties\', $scriptProperties, array());\\r\\n$object = &$modx->getOption(\'object\', $scriptProperties, null);\\r\\n$postvalues = &$modx->getOption(\'postvalues\', $scriptProperties, array());\\r\\n$form_field = $modx->getOption(\'form_field\', $scriptProperties, array());\\r\\n$value = $modx->getOption(\'value\', $scriptProperties, \'\');\\r\\n$validation_type = $modx->getOption(\'validation_type\', $scriptProperties, \'\');\\r\\n$result = \'\';\\r\\nswitch ($validation_type) {\\r\\n    case \'gt25\':\\r\\n        if ((int) $value > 25) {\\r\\n        } else {\\r\\n            $error_message = $validation_type; \\/\\/ may be custom validation message\\r\\n            $error[\'caption\'] = $form_field;\\r\\n            $error[\'validation_type\'] = $error_message;\\r\\n            $result[\'error\'] = $error;\\r\\n            $result = $modx->toJson($result);\\r\\n        }\\r\\n        break;\\r\\n}\\r\\nreturn $result;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"$properties = &$modx->getOption(\'scriptProperties\', $scriptProperties, array());\\r\\n$object = &$modx->getOption(\'object\', $scriptProperties, null);\\r\\n$postvalues = &$modx->getOption(\'postvalues\', $scriptProperties, array());\\r\\n$form_field = $modx->getOption(\'form_field\', $scriptProperties, array());\\r\\n$value = $modx->getOption(\'value\', $scriptProperties, \'\');\\r\\n$validation_type = $modx->getOption(\'validation_type\', $scriptProperties, \'\');\\r\\n$result = \'\';\\r\\nswitch ($validation_type) {\\r\\n    case \'gt25\':\\r\\n        if ((int) $value > 25) {\\r\\n        } else {\\r\\n            $error_message = $validation_type; \\/\\/ may be custom validation message\\r\\n            $error[\'caption\'] = $form_field;\\r\\n            $error[\'validation_type\'] = $error_message;\\r\\n            $result[\'error\'] = $error;\\r\\n            $result = $modx->toJson($result);\\r\\n        }\\r\\n        break;\\r\\n}\\r\\nreturn $result;"}',
        'guid' => '7714923e7c08f277c60a3b52cdf54d07',
        'native_key' => NULL,
        'signature' => '6c44b2a7984acac53adc10ae4b71833d',
      ),
      '6c313dfab3a713e1aa04406b1f7bed40' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxHookAftercollectmigxitems","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$configs = $modx->getOption(\'configs\', $_REQUEST, \'\');\\r\\n\\r\\n$rows = $modx->getOption(\'rows\', $scriptProperties, array());\\r\\n$newrows = array();\\r\\n\\r\\n\\r\\nif (is_array($rows)) {\\r\\n    $max_id = 0;\\r\\n    $dbfields = array();\\r\\n    $existing_dbfields = array();\\r\\n    foreach ($rows as $key => $row) {\\r\\n        if (isset($row[\'MIGX_id\']) && $row[\'MIGX_id\'] > $max_id) {\\r\\n            $max_id = $row[\'MIGX_id\'];\\r\\n        }\\r\\n        if (isset($row[\'selected_dbfields\']) && isset($row[\'existing_dbfields\'])) {\\r\\n            $dbfields = is_array($row[\'selected_dbfields\']) ? $row[\'selected_dbfields\'] : array($row[\'selected_dbfields\']);\\r\\n            \\r\\n            $existing_dbfields = explode(\'||\', $row[\'existing_dbfields\']);\\r\\n            \\/\\/echo \'<pre>\' . print_r($existing_dbfields,1) . \'<\\/pre>\';die();\\r\\n\\r\\n        } else {\\r\\n            $newrows[] = $row;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    foreach ($dbfields as $dbfield) {\\r\\n        if (!empty($dbfield) && !in_array($dbfield, $existing_dbfields)) {\\r\\n            $max_id++;\\r\\n            $newrow = array();\\r\\n            $newrow[\'MIGX_id\'] = $max_id;\\r\\n\\r\\n            switch ($configs) {\\r\\n                case \'migxformtabfields\':\\r\\n                    $newrow[\'field\'] = $dbfield;\\r\\n                    $newrow[\'caption\'] = $dbfield;\\r\\n                    break;\\r\\n                case \'migxcolumns\':\\r\\n                    $newrow[\'dataIndex\'] = $dbfield;\\r\\n                    $newrow[\'header\'] = $dbfield;\\r\\n                    break;                    \\r\\n            }\\r\\n\\r\\n\\r\\n            $newrows[] = $newrow;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\nreturn json_encode($newrows);","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"$configs = $modx->getOption(\'configs\', $_REQUEST, \'\');\\r\\n\\r\\n$rows = $modx->getOption(\'rows\', $scriptProperties, array());\\r\\n$newrows = array();\\r\\n\\r\\n\\r\\nif (is_array($rows)) {\\r\\n    $max_id = 0;\\r\\n    $dbfields = array();\\r\\n    $existing_dbfields = array();\\r\\n    foreach ($rows as $key => $row) {\\r\\n        if (isset($row[\'MIGX_id\']) && $row[\'MIGX_id\'] > $max_id) {\\r\\n            $max_id = $row[\'MIGX_id\'];\\r\\n        }\\r\\n        if (isset($row[\'selected_dbfields\']) && isset($row[\'existing_dbfields\'])) {\\r\\n            $dbfields = is_array($row[\'selected_dbfields\']) ? $row[\'selected_dbfields\'] : array($row[\'selected_dbfields\']);\\r\\n            \\r\\n            $existing_dbfields = explode(\'||\', $row[\'existing_dbfields\']);\\r\\n            \\/\\/echo \'<pre>\' . print_r($existing_dbfields,1) . \'<\\/pre>\';die();\\r\\n\\r\\n        } else {\\r\\n            $newrows[] = $row;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    foreach ($dbfields as $dbfield) {\\r\\n        if (!empty($dbfield) && !in_array($dbfield, $existing_dbfields)) {\\r\\n            $max_id++;\\r\\n            $newrow = array();\\r\\n            $newrow[\'MIGX_id\'] = $max_id;\\r\\n\\r\\n            switch ($configs) {\\r\\n                case \'migxformtabfields\':\\r\\n                    $newrow[\'field\'] = $dbfield;\\r\\n                    $newrow[\'caption\'] = $dbfield;\\r\\n                    break;\\r\\n                case \'migxcolumns\':\\r\\n                    $newrow[\'dataIndex\'] = $dbfield;\\r\\n                    $newrow[\'header\'] = $dbfield;\\r\\n                    break;                    \\r\\n            }\\r\\n\\r\\n\\r\\n            $newrows[] = $newrow;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\nreturn json_encode($newrows);"}',
        'guid' => '81fe107ea4957f4f60fb6fc67de4b6d2',
        'native_key' => NULL,
        'signature' => '8674405cae0b65704524a962d9011d33',
      ),
      '7f23a9e6bae8edfc71003ab69621b378' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxAutoPublish","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"$classnames = explode(\',\', $modx->getOption(\'classnames\',$scriptProperties,\'\'));\\r\\n$packageName = $modx->getOption(\'packageName\',$scriptProperties,\'\');\\r\\n\\r\\nswitch ($mode) {\\r\\n    case \'datetime\' :\\r\\n        $timeNow = strftime(\'%Y-%m-%d %H:%M:%S\');\\r\\n        break;\\r\\n    case \'unixtime\' :\\r\\n        $timeNow = time();\\r\\n        break;\\r\\n    default :\\r\\n        $timeNow = strftime(\'%Y-%m-%d %H:%M:%S\');\\r\\n        break;\\r\\n}\\r\\n\\r\\n$modx->addPackage($packageName, $modx->getOption(\'core_path\') . \'components\\/\' . $packageName . \'\\/model\\/\');\\r\\n\\r\\nforeach ($classnames as $classname) {\\r\\n    if (!empty($classname)) {\\r\\n        $tblResource = $modx->getTableName($classname);\\r\\n        if (!$result = $modx->exec(\\"UPDATE {$tblResource} SET published=1,publishedon=pub_date,pub_date=null WHERE pub_date < \'{$timeNow}\' AND pub_date > 0 AND published=0\\")) {\\r\\n            $modx->log(modX::LOG_LEVEL_ERROR, \'Error while refreshing resource publishing data: \' . print_r($modx->errorInfo(), true));\\r\\n        }\\r\\n        if (!$result = $modx->exec(\\"UPDATE $tblResource SET published=0,unpub_date=null WHERE unpub_date < \'{$timeNow}\' AND unpub_date IS NOT NULL AND unpub_date > 0 AND published=1\\")) {\\r\\n            $modx->log(modX::LOG_LEVEL_ERROR, \'Error while refreshing resource unpublishing data: \' . print_r($modx->errorInfo(), true));\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n$modx->cacheManager->refresh();","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"$classnames = explode(\',\', $modx->getOption(\'classnames\',$scriptProperties,\'\'));\\r\\n$packageName = $modx->getOption(\'packageName\',$scriptProperties,\'\');\\r\\n\\r\\nswitch ($mode) {\\r\\n    case \'datetime\' :\\r\\n        $timeNow = strftime(\'%Y-%m-%d %H:%M:%S\');\\r\\n        break;\\r\\n    case \'unixtime\' :\\r\\n        $timeNow = time();\\r\\n        break;\\r\\n    default :\\r\\n        $timeNow = strftime(\'%Y-%m-%d %H:%M:%S\');\\r\\n        break;\\r\\n}\\r\\n\\r\\n$modx->addPackage($packageName, $modx->getOption(\'core_path\') . \'components\\/\' . $packageName . \'\\/model\\/\');\\r\\n\\r\\nforeach ($classnames as $classname) {\\r\\n    if (!empty($classname)) {\\r\\n        $tblResource = $modx->getTableName($classname);\\r\\n        if (!$result = $modx->exec(\\"UPDATE {$tblResource} SET published=1,publishedon=pub_date,pub_date=null WHERE pub_date < \'{$timeNow}\' AND pub_date > 0 AND published=0\\")) {\\r\\n            $modx->log(modX::LOG_LEVEL_ERROR, \'Error while refreshing resource publishing data: \' . print_r($modx->errorInfo(), true));\\r\\n        }\\r\\n        if (!$result = $modx->exec(\\"UPDATE $tblResource SET published=0,unpub_date=null WHERE unpub_date < \'{$timeNow}\' AND unpub_date IS NOT NULL AND unpub_date > 0 AND published=1\\")) {\\r\\n            $modx->log(modX::LOG_LEVEL_ERROR, \'Error while refreshing resource unpublishing data: \' . print_r($modx->errorInfo(), true));\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n$modx->cacheManager->refresh();"}',
        'guid' => '37346a648277b805cf1bc7d8c0bdddf0',
        'native_key' => NULL,
        'signature' => 'ba45228406f165ddf50528175a2c9b12',
      ),
      '1bbc82f243082d74d66da3d70d0171dd' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxGetObject","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/*\\r\\ngetXpdoInstanceAndAddPackage - properties\\r\\n\\r\\n$prefix\\r\\n$usecustomprefix\\r\\n$packageName\\r\\n\\r\\n\\r\\nprepareQuery - properties:\\r\\n\\r\\n$limit\\r\\n$offset\\r\\n$totalVar\\r\\n$where\\r\\n$queries\\r\\n$sortConfig\\r\\n$groupby\\r\\n$joins\\r\\n$selectfields\\r\\n$classname\\r\\n$debug\\r\\n\\r\\nrenderOutput - properties:\\r\\n\\r\\n$tpl\\r\\n$wrapperTpl\\r\\n$toSeparatePlaceholders\\r\\n$toPlaceholder\\r\\n$outputSeparator\\r\\n$placeholdersKeyField\\r\\n$toJsonPlaceholder\\r\\n$jsonVarKey\\r\\n$addfields\\r\\n\\r\\nmigxGetObject - properties\\r\\n\\r\\n$id\\r\\n$toPlaceholders - if not empty, output to placeholders with specified prefix or print the array, if \'print_r\' is the property-value\\r\\n\\r\\n*\\/\\r\\n\\r\\n$id = $modx->getOption(\'id\',$scriptProperties,\'\');\\r\\n$scriptProperties[\'limit\'] = 1;\\r\\n\\r\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\r\\nif (!($migx instanceof Migx))\\r\\n    return \'\';\\r\\n\\/\\/$modx->migx = &$migx;\\r\\n\\r\\n$xpdo = $migx->getXpdoInstanceAndAddPackage($scriptProperties);\\r\\n\\r\\n$defaultcontext = \'web\';\\r\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\r\\n\\r\\n$c = $migx->prepareQuery($xpdo,$scriptProperties);\\r\\nif (!empty($id)){\\r\\n    $c->where(array(\'id\'=>$id));\\r\\n\\t$c->prepare();\\r\\n}\\t\\r\\n$rows = $migx->getCollection($c);\\r\\n\\r\\n$output = $migx->renderOutput($rows,$scriptProperties);\\r\\n\\r\\nreturn $output;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/*\\r\\ngetXpdoInstanceAndAddPackage - properties\\r\\n\\r\\n$prefix\\r\\n$usecustomprefix\\r\\n$packageName\\r\\n\\r\\n\\r\\nprepareQuery - properties:\\r\\n\\r\\n$limit\\r\\n$offset\\r\\n$totalVar\\r\\n$where\\r\\n$queries\\r\\n$sortConfig\\r\\n$groupby\\r\\n$joins\\r\\n$selectfields\\r\\n$classname\\r\\n$debug\\r\\n\\r\\nrenderOutput - properties:\\r\\n\\r\\n$tpl\\r\\n$wrapperTpl\\r\\n$toSeparatePlaceholders\\r\\n$toPlaceholder\\r\\n$outputSeparator\\r\\n$placeholdersKeyField\\r\\n$toJsonPlaceholder\\r\\n$jsonVarKey\\r\\n$addfields\\r\\n\\r\\nmigxGetObject - properties\\r\\n\\r\\n$id\\r\\n$toPlaceholders - if not empty, output to placeholders with specified prefix or print the array, if \'print_r\' is the property-value\\r\\n\\r\\n*\\/\\r\\n\\r\\n$id = $modx->getOption(\'id\',$scriptProperties,\'\');\\r\\n$scriptProperties[\'limit\'] = 1;\\r\\n\\r\\n$migx = $modx->getService(\'migx\', \'Migx\', $modx->getOption(\'migx.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/migx\\/\') . \'model\\/migx\\/\', $scriptProperties);\\r\\nif (!($migx instanceof Migx))\\r\\n    return \'\';\\r\\n\\/\\/$modx->migx = &$migx;\\r\\n\\r\\n$xpdo = $migx->getXpdoInstanceAndAddPackage($scriptProperties);\\r\\n\\r\\n$defaultcontext = \'web\';\\r\\n$migx->working_context = isset($modx->resource) ? $modx->resource->get(\'context_key\') : $defaultcontext;\\r\\n\\r\\n$c = $migx->prepareQuery($xpdo,$scriptProperties);\\r\\nif (!empty($id)){\\r\\n    $c->where(array(\'id\'=>$id));\\r\\n\\t$c->prepare();\\r\\n}\\t\\r\\n$rows = $migx->getCollection($c);\\r\\n\\r\\n$output = $migx->renderOutput($rows,$scriptProperties);\\r\\n\\r\\nreturn $output;"}',
        'guid' => 'd14c76dfe68f724b69812aa628e1eca7',
        'native_key' => NULL,
        'signature' => 'a098da701160e709922caf54501f6146',
      ),
    ),
    'Plugins' => 
    array (
      '59c9709ffec5d78d9ddc80c66c83f335' => 
      array (
        'unique_key' => 'name',
        'preserve_keys' => false,
        'update_object' => true,
        'related_objects' => 
        array (
          'PluginEvents' => 
          array (
            '86ce2c413e5905d49bfa97dcd5a5ce9a' => 
            array (
              'preserve_keys' => true,
              'update_object' => false,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnDocFormPrerender","priority":0,"propertyset":0}',
              'guid' => 'be98b587d647257318b441a7d386fded',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnDocFormPrerender',
              ),
              'signature' => 'f993236d72b7c6ae214dfaf061617321',
            ),
            '0b2b8ed9f0c5512e425c53a638de0490' => 
            array (
              'preserve_keys' => true,
              'update_object' => false,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnTVInputPropertiesList","priority":0,"propertyset":0}',
              'guid' => '8b49450a8cfdfa3f6af204f83ca8442e',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnTVInputPropertiesList',
              ),
              'signature' => 'c4631a16fc7fa09aead7d9b41b0b5fa4',
            ),
            '4f5f139496e0edd010cb1c1e3acf89d6' => 
            array (
              'preserve_keys' => true,
              'update_object' => false,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnTVInputRenderList","priority":0,"propertyset":0}',
              'guid' => '868e24c7994b884e7e3f8b34a5b80ee5',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnTVInputRenderList',
              ),
              'signature' => 'e07edc9e1ee52d8f606535db7860403a',
            ),
          ),
        ),
        'related_object_attributes' => 
        array (
          'PluginEvents' => 
          array (
            'preserve_keys' => true,
            'update_object' => false,
            'unique_key' => 
            array (
              0 => 'pluginid',
              1 => 'event',
            ),
          ),
        ),
        'class' => 'modPlugin',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"MIGX","description":"","editor_type":0,"category":0,"cache_type":0,"plugincode":"$corePath = $modx->getOption(\'migx.core_path\',null,$modx->getOption(\'core_path\').\'components\\/migx\\/\');\\r\\n$assetsUrl = $modx->getOption(\'migx.assets_url\', null, $modx->getOption(\'assets_url\') . \'components\\/migx\\/\');\\r\\nswitch ($modx->event->name) {\\r\\n    case \'OnTVInputRenderList\':\\r\\n        $modx->event->output($corePath.\'elements\\/tv\\/input\\/\');\\r\\n        break;\\r\\n    case \'OnTVInputPropertiesList\':\\r\\n        $modx->event->output($corePath.\'elements\\/tv\\/inputoptions\\/\');\\r\\n        break;\\r\\n\\r\\n        case \'OnDocFormPrerender\':\\r\\n        $modx->controller->addCss($assetsUrl.\'css\\/mgr.css\');\\r\\n        break; \\r\\n \\r\\n    \\/*          \\r\\n    case \'OnTVOutputRenderList\':\\r\\n        $modx->event->output($corePath.\'elements\\/tv\\/output\\/\');\\r\\n        break;\\r\\n    case \'OnTVOutputRenderPropertiesList\':\\r\\n        $modx->event->output($corePath.\'elements\\/tv\\/properties\\/\');\\r\\n        break;\\r\\n    \\r\\n    case \'OnDocFormPrerender\':\\r\\n        $assetsUrl = $modx->getOption(\'colorpicker.assets_url\',null,$modx->getOption(\'assets_url\').\'components\\/colorpicker\\/\'); \\r\\n        $modx->regClientStartupHTMLBlock(\'<script type=\\"text\\/javascript\\">\\r\\n        Ext.onReady(function() {\\r\\n            \\r\\n        });\\r\\n        <\\/script>\');\\r\\n        $modx->regClientStartupScript($assetsUrl.\'sources\\/ColorPicker.js\');\\r\\n        $modx->regClientStartupScript($assetsUrl.\'sources\\/ColorMenu.js\');\\r\\n        $modx->regClientStartupScript($assetsUrl.\'sources\\/ColorPickerField.js\');\\t\\t\\r\\n        $modx->regClientCSS($assetsUrl.\'resources\\/css\\/colorpicker.css\');\\r\\n        break;\\r\\n     *\\/\\r\\n}\\r\\nreturn;","locked":0,"properties":"a:0:{}","disabled":0,"moduleguid":"","static":0,"static_file":"","content":"$corePath = $modx->getOption(\'migx.core_path\',null,$modx->getOption(\'core_path\').\'components\\/migx\\/\');\\r\\n$assetsUrl = $modx->getOption(\'migx.assets_url\', null, $modx->getOption(\'assets_url\') . \'components\\/migx\\/\');\\r\\nswitch ($modx->event->name) {\\r\\n    case \'OnTVInputRenderList\':\\r\\n        $modx->event->output($corePath.\'elements\\/tv\\/input\\/\');\\r\\n        break;\\r\\n    case \'OnTVInputPropertiesList\':\\r\\n        $modx->event->output($corePath.\'elements\\/tv\\/inputoptions\\/\');\\r\\n        break;\\r\\n\\r\\n        case \'OnDocFormPrerender\':\\r\\n        $modx->controller->addCss($assetsUrl.\'css\\/mgr.css\');\\r\\n        break; \\r\\n \\r\\n    \\/*          \\r\\n    case \'OnTVOutputRenderList\':\\r\\n        $modx->event->output($corePath.\'elements\\/tv\\/output\\/\');\\r\\n        break;\\r\\n    case \'OnTVOutputRenderPropertiesList\':\\r\\n        $modx->event->output($corePath.\'elements\\/tv\\/properties\\/\');\\r\\n        break;\\r\\n    \\r\\n    case \'OnDocFormPrerender\':\\r\\n        $assetsUrl = $modx->getOption(\'colorpicker.assets_url\',null,$modx->getOption(\'assets_url\').\'components\\/colorpicker\\/\'); \\r\\n        $modx->regClientStartupHTMLBlock(\'<script type=\\"text\\/javascript\\">\\r\\n        Ext.onReady(function() {\\r\\n            \\r\\n        });\\r\\n        <\\/script>\');\\r\\n        $modx->regClientStartupScript($assetsUrl.\'sources\\/ColorPicker.js\');\\r\\n        $modx->regClientStartupScript($assetsUrl.\'sources\\/ColorMenu.js\');\\r\\n        $modx->regClientStartupScript($assetsUrl.\'sources\\/ColorPickerField.js\');\\t\\t\\r\\n        $modx->regClientCSS($assetsUrl.\'resources\\/css\\/colorpicker.css\');\\r\\n        break;\\r\\n     *\\/\\r\\n}\\r\\nreturn;"}',
        'guid' => '248bb46f65e19c271326d86542fe5979',
        'native_key' => NULL,
        'signature' => 'd6f101df9e863d8e1b029bc132321275',
      ),
      '09fcb27169f4002af0d7f5fcb31b10ea' => 
      array (
        'unique_key' => 'name',
        'preserve_keys' => false,
        'update_object' => true,
        'related_objects' => 
        array (
          'PluginEvents' => 
          array (
            'a52f7d548ea6b92604202a7ce616eff8' => 
            array (
              'preserve_keys' => true,
              'update_object' => false,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnDocFormPrerender","priority":0,"propertyset":0}',
              'guid' => '39ca5260d86079804c9d09d546dd3122',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnDocFormPrerender',
              ),
              'signature' => 'dce47058bf4ee786dbe78d38159bea59',
            ),
          ),
        ),
        'related_object_attributes' => 
        array (
          'PluginEvents' => 
          array (
            'preserve_keys' => true,
            'update_object' => false,
            'unique_key' => 
            array (
              0 => 'pluginid',
              1 => 'event',
            ),
          ),
        ),
        'class' => 'modPlugin',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"MIGXquip","description":"","editor_type":0,"category":0,"cache_type":0,"plugincode":"$quipCorePath = $modx->getOption(\'quip.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/quip\\/\');\\r\\n\\/\\/$assetsUrl = $modx->getOption(\'migx.assets_url\', null, $modx->getOption(\'assets_url\') . \'components\\/migx\\/\');\\r\\nswitch ($modx->event->name)\\r\\n{\\r\\n\\r\\n    case \'OnDocFormPrerender\':\\r\\n\\r\\n        \\r\\n        require_once $quipCorePath . \'model\\/quip\\/quip.class.php\';\\r\\n        $modx->quip = new Quip($modx);\\r\\n\\r\\n        $modx->lexicon->load(\'quip:default\');\\r\\n        $quipconfig = $modx->toJson($modx->quip->config);\\r\\n        \\r\\n        $js = \\"\\r\\n        Quip.config = Ext.util.JSON.decode(\'{$quipconfig}\');\\r\\n        console.log(Quip);\\";\\r\\n\\r\\n        \\/\\/$modx->controller->addCss($assetsUrl . \'css\\/mgr.css\');\\r\\n        $modx->controller->addJavascript($modx->quip->config[\'jsUrl\'].\'quip.js\');\\r\\n        $modx->controller->addHtml(\'<script type=\\"text\\/javascript\\">\' . $js . \'<\\/script>\');\\r\\n        break;\\r\\n\\r\\n}\\r\\nreturn;","locked":0,"properties":"a:0:{}","disabled":1,"moduleguid":"","static":0,"static_file":"","content":"$quipCorePath = $modx->getOption(\'quip.core_path\', null, $modx->getOption(\'core_path\') . \'components\\/quip\\/\');\\r\\n\\/\\/$assetsUrl = $modx->getOption(\'migx.assets_url\', null, $modx->getOption(\'assets_url\') . \'components\\/migx\\/\');\\r\\nswitch ($modx->event->name)\\r\\n{\\r\\n\\r\\n    case \'OnDocFormPrerender\':\\r\\n\\r\\n        \\r\\n        require_once $quipCorePath . \'model\\/quip\\/quip.class.php\';\\r\\n        $modx->quip = new Quip($modx);\\r\\n\\r\\n        $modx->lexicon->load(\'quip:default\');\\r\\n        $quipconfig = $modx->toJson($modx->quip->config);\\r\\n        \\r\\n        $js = \\"\\r\\n        Quip.config = Ext.util.JSON.decode(\'{$quipconfig}\');\\r\\n        console.log(Quip);\\";\\r\\n\\r\\n        \\/\\/$modx->controller->addCss($assetsUrl . \'css\\/mgr.css\');\\r\\n        $modx->controller->addJavascript($modx->quip->config[\'jsUrl\'].\'quip.js\');\\r\\n        $modx->controller->addHtml(\'<script type=\\"text\\/javascript\\">\' . $js . \'<\\/script>\');\\r\\n        break;\\r\\n\\r\\n}\\r\\nreturn;"}',
        'guid' => '4ebe6326c60be8aff038396025755cb4',
        'native_key' => NULL,
        'signature' => '7632e5662e490b62528547de49da9b06',
      ),
      '0be7a4e797e4305455997f3318c7c7d5' => 
      array (
        'unique_key' => 'name',
        'preserve_keys' => false,
        'update_object' => true,
        'related_objects' => 
        array (
          'PluginEvents' => 
          array (
            '2c0f4dfb28d36617f0233c4103776eb9' => 
            array (
              'preserve_keys' => true,
              'update_object' => false,
              'unique_key' => 
              array (
                0 => 'pluginid',
                1 => 'event',
              ),
              'class' => 'modPluginEvent',
              'object' => '{"pluginid":0,"event":"OnFileManagerUpload","priority":0,"propertyset":0}',
              'guid' => '5cfab34fe7ff80fd4b01b14f76e088da',
              'native_key' => 
              array (
                0 => 0,
                1 => 'OnFileManagerUpload',
              ),
              'signature' => 'eb4e052e03318886d09eb493c215d38f',
            ),
          ),
        ),
        'related_object_attributes' => 
        array (
          'PluginEvents' => 
          array (
            'preserve_keys' => true,
            'update_object' => false,
            'unique_key' => 
            array (
              0 => 'pluginid',
              1 => 'event',
            ),
          ),
        ),
        'class' => 'modPlugin',
        'object' => '{"id":null,"source":0,"property_preprocess":0,"name":"migxResizeOnUpload","description":"","editor_type":0,"category":0,"cache_type":0,"plugincode":"\\/**\\n * migxResizeOnUpload Plugin\\n *\\n * Events: OnFileManagerUpload\\n * Author: Bruno Perner <b.perner@gmx.de>\\n * Modified to read multiple configs from mediasource-property\\n * \\n * First Author: Vasiliy Naumkin <bezumkin@yandex.ru>\\n * Required: PhpThumbOf snippet for resizing images\\n * \\n * Example: mediasource - property \'resizeConfig\':\\n * [{\\"alias\\":\\"origin\\",\\"w\\":\\"500\\",\\"h\\":\\"500\\",\\"far\\":1},{\\"alias\\":\\"thumb\\",\\"w\\":\\"150\\",\\"h\\":\\"150\\",\\"far\\":1}]\\n *\\/\\n\\nif ($modx->event->name != \'OnFileManagerUpload\') {\\n    return;\\n}\\n\\n\\n$file = $modx->event->params[\'files\'][\'file\'];\\n$directory = $modx->event->params[\'directory\'];\\n\\nif ($file[\'error\'] != 0) {\\n    return;\\n}\\n\\n$name = $file[\'name\'];\\n\\/\\/$extensions = explode(\',\', $modx->getOption(\'upload_images\'));\\n\\n$source = $modx->event->params[\'source\'];\\n\\nif ($source instanceof modMediaSource) {\\n    \\/\\/$dirTree = $modx->getOption(\'dirtree\', $_REQUEST, \'\');\\n    \\/\\/$modx->setPlaceholder(\'docid\', $resource_id);\\n    $source->initialize();\\n    $basePath = str_replace(\'\\/.\\/\', \'\\/\', $source->getBasePath());\\n    \\/\\/$cachepath = $cachepath . $dirTree;\\n    $baseUrl = $modx->getOption(\'site_url\') . $source->getBaseUrl();\\n    \\/\\/$baseUrl = $baseUrl . $dirTree;\\n    $sourceProperties = $source->getPropertyList();\\n\\n    \\/\\/echo \'<pre>\' . print_r($sourceProperties, 1) . \'<\\/pre>\';\\n    \\/\\/$allowedExtensions = $modx->getOption(\'allowedFileTypes\', $sourceProperties, \'\');\\n    \\/\\/$allowedExtensions = empty($allowedExtensions) ? \'jpg,jpeg,png,gif\' : $allowedExtensions;\\n    \\/\\/$maxFilesizeMb = $modx->getOption(\'maxFilesizeMb\', $sourceProperties, \'8\');\\n    \\/\\/$maxFiles = $modx->getOption(\'maxFiles\', $sourceProperties, \'0\');\\n    \\/\\/$thumbX = $modx->getOption(\'thumbX\', $sourceProperties, \'100\');\\n    \\/\\/$thumbY = $modx->getOption(\'thumbY\', $sourceProperties, \'100\');\\n    $resizeConfigs = $modx->getOption(\'resizeConfigs\', $sourceProperties, \'\');\\n    $resizeConfigs = $modx->fromJson($resizeConfigs);\\n    $thumbscontainer = $modx->getOption(\'thumbscontainer\', $sourceProperties, \'thumbs\\/\');\\n    $imageExtensions = $modx->getOption(\'imageExtensions\', $sourceProperties, \'jpg,jpeg,png,gif,JPG\');\\n    $imageExtensions = explode(\',\', $imageExtensions);\\n    \\/\\/$uniqueFilenames = $modx->getOption(\'uniqueFilenames\', $sourceProperties, false);\\n    \\/\\/$onImageUpload = $modx->getOption(\'onImageUpload\', $sourceProperties, \'\');\\n    \\/\\/$onImageRemove = $modx->getOption(\'onImageRemove\', $sourceProperties, \'\');\\n    $cleanalias = $modx->getOption(\'cleanFilename\', $sourceProperties, false);\\n\\n}\\n\\nif (is_array($resizeConfigs) && count($resizeConfigs) > 0) {\\n    foreach ($resizeConfigs as $rc) {\\n        if (isset($rc[\'alias\'])) {\\n            $filePath = $basePath . $directory;\\n            $filePath = str_replace(\'\\/\\/\',\'\\/\',$filePath);\\n            if ($rc[\'alias\'] == \'origin\') {\\n                $thumbPath = $filePath;\\n            } else {\\n                $thumbPath = $filePath . $rc[\'alias\'] . \'\\/\';\\n                $permissions = octdec(\'0\' . (int)($modx->getOption(\'new_folder_permissions\', null, \'755\', true)));\\n                if (!@mkdir($thumbPath, $permissions, true)) {\\n                    $modx->log(MODX_LOG_LEVEL_ERROR, sprintf(\'[migxResourceMediaPath]: could not create directory %s).\', $thumbPath));\\n                } else {\\n                    chmod($thumbPath, $permissions);\\n                }\\n\\n            }\\n\\n\\n            $filename = $filePath . $name;\\n            $thumbname = $thumbPath . $name;\\n            $ext = substr(strrchr($name, \'.\'), 1);\\n            if (in_array($ext, $imageExtensions)) {\\n                $sizes = getimagesize($filename);\\n                echo $sizes[0]; \\n                \\/\\/$format = substr($sizes[\'mime\'], 6);\\n                if ($sizes[0] > $rc[\'w\'] || $sizes[1] > $rc[\'h\']) {\\n                    if ($sizes[0] < $rc[\'w\']) {\\n                        $rc[\'w\'] = $sizes[0];\\n                    }\\n                    if ($sizes[1] < $rc[\'h\']) {\\n                        $rc[\'h\'] = $sizes[1];\\n                    }\\n                    $type = $sizes[0] > $sizes[1] ? \'landscape\' : \'portrait\';\\n                    if (isset($rc[\'far\']) && $rc[\'far\'] == \'1\' && isset($rc[\'w\']) && isset($rc[\'h\'])) {\\n                        if ($type = \'landscape\') {\\n                            unset($rc[\'h\']);\\n                        }else {\\n                            unset($rc[\'w\']);\\n                        }\\n                    }\\n\\n                    $options = \'\';\\n                    foreach ($rc as $k => $v) {\\n                        if ($k != \'alias\') {\\n                            $options .= \'&\' . $k . \'=\' . $v;\\n                        }\\n                    }\\n                    $resized = $modx->runSnippet(\'phpthumbof\', array(\'input\' => $filePath . $name, \'options\' => $options));\\n                    rename(MODX_BASE_PATH . substr($resized, 1), $thumbname);\\n                }\\n            }\\n\\n\\n        }\\n    }\\n}","locked":0,"properties":"a:0:{}","disabled":0,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * migxResizeOnUpload Plugin\\n *\\n * Events: OnFileManagerUpload\\n * Author: Bruno Perner <b.perner@gmx.de>\\n * Modified to read multiple configs from mediasource-property\\n * \\n * First Author: Vasiliy Naumkin <bezumkin@yandex.ru>\\n * Required: PhpThumbOf snippet for resizing images\\n * \\n * Example: mediasource - property \'resizeConfig\':\\n * [{\\"alias\\":\\"origin\\",\\"w\\":\\"500\\",\\"h\\":\\"500\\",\\"far\\":1},{\\"alias\\":\\"thumb\\",\\"w\\":\\"150\\",\\"h\\":\\"150\\",\\"far\\":1}]\\n *\\/\\n\\nif ($modx->event->name != \'OnFileManagerUpload\') {\\n    return;\\n}\\n\\n\\n$file = $modx->event->params[\'files\'][\'file\'];\\n$directory = $modx->event->params[\'directory\'];\\n\\nif ($file[\'error\'] != 0) {\\n    return;\\n}\\n\\n$name = $file[\'name\'];\\n\\/\\/$extensions = explode(\',\', $modx->getOption(\'upload_images\'));\\n\\n$source = $modx->event->params[\'source\'];\\n\\nif ($source instanceof modMediaSource) {\\n    \\/\\/$dirTree = $modx->getOption(\'dirtree\', $_REQUEST, \'\');\\n    \\/\\/$modx->setPlaceholder(\'docid\', $resource_id);\\n    $source->initialize();\\n    $basePath = str_replace(\'\\/.\\/\', \'\\/\', $source->getBasePath());\\n    \\/\\/$cachepath = $cachepath . $dirTree;\\n    $baseUrl = $modx->getOption(\'site_url\') . $source->getBaseUrl();\\n    \\/\\/$baseUrl = $baseUrl . $dirTree;\\n    $sourceProperties = $source->getPropertyList();\\n\\n    \\/\\/echo \'<pre>\' . print_r($sourceProperties, 1) . \'<\\/pre>\';\\n    \\/\\/$allowedExtensions = $modx->getOption(\'allowedFileTypes\', $sourceProperties, \'\');\\n    \\/\\/$allowedExtensions = empty($allowedExtensions) ? \'jpg,jpeg,png,gif\' : $allowedExtensions;\\n    \\/\\/$maxFilesizeMb = $modx->getOption(\'maxFilesizeMb\', $sourceProperties, \'8\');\\n    \\/\\/$maxFiles = $modx->getOption(\'maxFiles\', $sourceProperties, \'0\');\\n    \\/\\/$thumbX = $modx->getOption(\'thumbX\', $sourceProperties, \'100\');\\n    \\/\\/$thumbY = $modx->getOption(\'thumbY\', $sourceProperties, \'100\');\\n    $resizeConfigs = $modx->getOption(\'resizeConfigs\', $sourceProperties, \'\');\\n    $resizeConfigs = $modx->fromJson($resizeConfigs);\\n    $thumbscontainer = $modx->getOption(\'thumbscontainer\', $sourceProperties, \'thumbs\\/\');\\n    $imageExtensions = $modx->getOption(\'imageExtensions\', $sourceProperties, \'jpg,jpeg,png,gif,JPG\');\\n    $imageExtensions = explode(\',\', $imageExtensions);\\n    \\/\\/$uniqueFilenames = $modx->getOption(\'uniqueFilenames\', $sourceProperties, false);\\n    \\/\\/$onImageUpload = $modx->getOption(\'onImageUpload\', $sourceProperties, \'\');\\n    \\/\\/$onImageRemove = $modx->getOption(\'onImageRemove\', $sourceProperties, \'\');\\n    $cleanalias = $modx->getOption(\'cleanFilename\', $sourceProperties, false);\\n\\n}\\n\\nif (is_array($resizeConfigs) && count($resizeConfigs) > 0) {\\n    foreach ($resizeConfigs as $rc) {\\n        if (isset($rc[\'alias\'])) {\\n            $filePath = $basePath . $directory;\\n            $filePath = str_replace(\'\\/\\/\',\'\\/\',$filePath);\\n            if ($rc[\'alias\'] == \'origin\') {\\n                $thumbPath = $filePath;\\n            } else {\\n                $thumbPath = $filePath . $rc[\'alias\'] . \'\\/\';\\n                $permissions = octdec(\'0\' . (int)($modx->getOption(\'new_folder_permissions\', null, \'755\', true)));\\n                if (!@mkdir($thumbPath, $permissions, true)) {\\n                    $modx->log(MODX_LOG_LEVEL_ERROR, sprintf(\'[migxResourceMediaPath]: could not create directory %s).\', $thumbPath));\\n                } else {\\n                    chmod($thumbPath, $permissions);\\n                }\\n\\n            }\\n\\n\\n            $filename = $filePath . $name;\\n            $thumbname = $thumbPath . $name;\\n            $ext = substr(strrchr($name, \'.\'), 1);\\n            if (in_array($ext, $imageExtensions)) {\\n                $sizes = getimagesize($filename);\\n                echo $sizes[0]; \\n                \\/\\/$format = substr($sizes[\'mime\'], 6);\\n                if ($sizes[0] > $rc[\'w\'] || $sizes[1] > $rc[\'h\']) {\\n                    if ($sizes[0] < $rc[\'w\']) {\\n                        $rc[\'w\'] = $sizes[0];\\n                    }\\n                    if ($sizes[1] < $rc[\'h\']) {\\n                        $rc[\'h\'] = $sizes[1];\\n                    }\\n                    $type = $sizes[0] > $sizes[1] ? \'landscape\' : \'portrait\';\\n                    if (isset($rc[\'far\']) && $rc[\'far\'] == \'1\' && isset($rc[\'w\']) && isset($rc[\'h\'])) {\\n                        if ($type = \'landscape\') {\\n                            unset($rc[\'h\']);\\n                        }else {\\n                            unset($rc[\'w\']);\\n                        }\\n                    }\\n\\n                    $options = \'\';\\n                    foreach ($rc as $k => $v) {\\n                        if ($k != \'alias\') {\\n                            $options .= \'&\' . $k . \'=\' . $v;\\n                        }\\n                    }\\n                    $resized = $modx->runSnippet(\'phpthumbof\', array(\'input\' => $filePath . $name, \'options\' => $options));\\n                    rename(MODX_BASE_PATH . substr($resized, 1), $thumbname);\\n                }\\n            }\\n\\n\\n        }\\n    }\\n}"}',
        'guid' => 'cfe4b9e4fed7a89219663ef9bc88d44b',
        'native_key' => NULL,
        'signature' => 'dc73eadddd2c09a871c2ee45be2366bd',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Children' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 
      array (
        0 => 'parent',
        1 => 'category',
      ),
    ),
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Chunks' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Templates' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'templatename',
    ),
    'TemplateVars' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Plugins' => 
    array (
      'unique_key' => 'name',
      'preserve_keys' => false,
      'update_object' => true,
      'related_objects' => true,
      'related_object_attributes' => 
      array (
        'PluginEvents' => 
        array (
          'preserve_keys' => true,
          'update_object' => false,
          'unique_key' => 
          array (
            0 => 'pluginid',
            1 => 'event',
          ),
        ),
      ),
    ),
  ),
  'namespace' => 'migx',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"migx-3.0.2-beta1\\/modCategory\\/a5651533228b3626de85e0eafcebbf0e\\/0\\/","target":"return MODX_ASSETS_PATH . \'components\\/\';","name":"migx"}',
    ),
    1 => 
    array (
      'type' => 'file',
      'body' => '{"source":"migx-3.0.2-beta1\\/modCategory\\/a5651533228b3626de85e0eafcebbf0e\\/1\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"migx"}',
    ),
    2 => 
    array (
      'type' => 'php',
      'body' => '{"source":"migx-3.0.2-beta1\\/modCategory\\/a5651533228b3626de85e0eafcebbf0e.gpm.resolve.tables.resolver","type":"php","name":"gpm.resolve.tables"}',
    ),
    3 => 
    array (
      'type' => 'php',
      'body' => '{"source":"migx-3.0.2-beta1\\/modCategory\\/a5651533228b3626de85e0eafcebbf0e.resolve.synctables.resolver","type":"php","name":"resolve.synctables"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '74305d01f00de2325e208e127ce44388',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => 'a5651533228b3626de85e0eafcebbf0e',
  'native_key' => NULL,
  'object' => '{"id":null,"parent":0,"category":"MIGX","rank":0}',
);